{"version":3,"file":"static/js/4705.aa61c918.chunk.js","mappings":"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","sources":["screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { useSelector } from \"react-redux\";\nimport { Button, FormLayout, ReadBox, Grid, ProgressBar } from \"mds\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport api from \"../../../common/api\";\n\ninterface ISetPolicyProps {\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst SetPolicy = ({\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group/${encodeURIComponent(selectedGroups[0])}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <ReadBox\n              label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n              sx={{ width: \"100%\" }}\n            >\n              {selectedGroups !== null ? selectedGroups[0] : userName}\n            </ReadBox>\n            <ReadBox label={\"Current Policy\"} sx={{ width: \"100%\" }}>\n              {actualPolicy.join(\", \")}\n            </ReadBox>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <ReadBox label={\"Selected Groups\"} sx={{ width: \"100%\" }}>\n            {selectedGroups.join(\", \")}\n          </ReadBox>\n        )}\n        <Grid item xs={12}>\n          <PolicySelectors selectedPolicy={selectedPolicy} />\n        </Grid>\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n          label={\"Save\"}\n        />\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <ProgressBar />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default SetPolicy;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n"],"names":["_ref","noTitle","dispatch","useAppDispatch","records","setRecords","useState","loading","isLoading","filter","setFilter","currentPolicies","useSelector","state","createUser","selectedPolicies","fetchPolicies","useCallback","api","policies","listPolicies","then","res","_res$data$policies","data","sort","policySort","catch","err","setModalErrorSnackMessage","useEffect","filteredRecords","elementItem","name","includes","_jsxs","Grid","item","xs","className","children","_jsx","ProgressBar","length","Fragment","SearchBox","placeholder","onChange","value","label","DataTable","columns","elementKey","onSelect","e","targetD","target","checked","elements","push","element","setSelectedPolicies","selectedItems","entityName","idField","customPaperHeight","Box","sx","textAlign","padding","closeModalAndRefresh","selectedUser","selectedGroups","open","setLoading","actualPolicy","setActualPolicy","selectedPolicy","setSelectedPolicy","invoke","encodeURIComponent","groupPolicy","get","split","userPolicy","userName","ModalWrapper","onClose","modalOpen","title","FormLayout","withBorders","containerPadding","ReadBox","width","join","PolicySelectors","modalStyleUtils","modalButtonBar","Button","id","type","variant","onClick","resetSelection","color","disabled","setPolicyAction","users","groups","accessKey","wideLimit","titleIcon","iconColor","openSnackbar","setOpenSnackbar","modalSnackMessage","system","modalSnackBar","setModalSnackMessage","message","detailedErrorMsg","ModalBox","widthLimit","MainError","isModal","Snackbar","closeSnackBar","mode","autoHideDuration","condensed"],"sourceRoot":""}
{"version":3,"file":"static/js/2689.fc0c15bd.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/BucketReplicationPanel.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  AddIcon,\n  Box,\n  BucketsIcon,\n  Button,\n  DataTable,\n  Grid,\n  HelpBox,\n  SectionTitle,\n  TrashIcon,\n  HelpTip,\n} from \"mds\";\nimport api from \"../../../../common/api\";\nimport {\n  BucketReplication,\n  BucketReplicationDestination,\n  BucketReplicationRule,\n} from \"../types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport {\n  hasPermission,\n  SecureComponent,\n} from \"../../../../common/SecureComponent\";\nimport {\n  IAM_PAGES,\n  IAM_SCOPES,\n} from \"../../../../common/SecureComponent/permissions\";\nimport { setErrorSnackMessage, setHelpName } from \"../../../../systemSlice\";\nimport { selBucketDetailsLoading } from \"./bucketDetailsSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport TooltipWrapper from \"../../Common/TooltipWrapper/TooltipWrapper\";\nimport withSuspense from \"../../Common/Components/withSuspense\";\n\nconst EditReplicationModal = withSuspense(\n  React.lazy(() => import(\"./EditReplicationModal\")),\n);\nconst AddReplicationModal = withSuspense(\n  React.lazy(() => import(\"./AddReplicationModal\")),\n);\nconst DeleteReplicationRule = withSuspense(\n  React.lazy(() => import(\"./DeleteReplicationRule\")),\n);\n\nconst BucketReplicationPanel = () => {\n  const dispatch = useAppDispatch();\n  const params = useParams();\n\n  const loadingBucket = useSelector(selBucketDetailsLoading);\n\n  const [loadingReplication, setLoadingReplication] = useState<boolean>(true);\n  const [replicationRules, setReplicationRules] = useState<\n    BucketReplicationRule[]\n  >([]);\n  const [deleteReplicationModal, setDeleteReplicationModal] =\n    useState<boolean>(false);\n  const [openSetReplication, setOpenSetReplication] = useState<boolean>(false);\n  const [editReplicationModal, setEditReplicationModal] =\n    useState<boolean>(false);\n  const [selectedRRule, setSelectedRRule] = useState<string>(\"\");\n  const [selectedRepRules, setSelectedRepRules] = useState<string[]>([]);\n  const [deleteSelectedRules, setDeleteSelectedRules] =\n    useState<boolean>(false);\n\n  const bucketName = params.bucketName || \"\";\n\n  const displayReplicationRules = hasPermission(bucketName, [\n    IAM_SCOPES.S3_GET_REPLICATION_CONFIGURATION,\n    IAM_SCOPES.S3_GET_ACTIONS,\n  ]);\n  useEffect(() => {\n    dispatch(setHelpName(\"bucket_detail_replication\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (loadingBucket) {\n      setLoadingReplication(true);\n    }\n  }, [loadingBucket, setLoadingReplication]);\n\n  useEffect(() => {\n    if (loadingReplication) {\n      if (displayReplicationRules) {\n        api\n          .invoke(\"GET\", `/api/v1/buckets/${bucketName}/replication`)\n          .then((res: BucketReplication) => {\n            const r = res.rules ? res.rules : [];\n\n            r.sort((a, b) => a.priority - b.priority);\n\n            setReplicationRules(r);\n            setLoadingReplication(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            dispatch(setErrorSnackMessage(err));\n            setLoadingReplication(false);\n          });\n      } else {\n        setLoadingReplication(false);\n      }\n    }\n  }, [loadingReplication, dispatch, bucketName, displayReplicationRules]);\n\n  const closeAddReplication = () => {\n    setOpenReplicationOpen(false);\n    setLoadingReplication(true);\n  };\n\n  const setOpenReplicationOpen = (open = false) => {\n    setOpenSetReplication(open);\n  };\n\n  const closeReplicationModalDelete = (refresh: boolean) => {\n    setDeleteReplicationModal(false);\n\n    if (refresh) {\n      setLoadingReplication(true);\n    }\n  };\n\n  const closeEditReplication = (refresh: boolean) => {\n    setEditReplicationModal(false);\n\n    if (refresh) {\n      setLoadingReplication(true);\n    }\n  };\n\n  const confirmDeleteReplication = (replication: BucketReplicationRule) => {\n    setSelectedRRule(replication.id);\n    setDeleteSelectedRules(false);\n    setDeleteReplicationModal(true);\n  };\n\n  const confirmDeleteSelectedReplicationRules = () => {\n    setSelectedRRule(\"selectedRules\");\n    setDeleteSelectedRules(true);\n    setDeleteReplicationModal(true);\n  };\n  const navigate = useNavigate();\n  const editReplicationRule = (replication: BucketReplicationRule) => {\n    setSelectedRRule(replication.id);\n    navigate(\n      `/buckets/edit-replication?bucketName=${bucketName}&ruleID=${replication.id}`,\n    );\n  };\n\n  const ruleDestDisplay = (events: BucketReplicationDestination) => {\n    return <Fragment>{events.bucket.replace(\"arn:aws:s3:::\", \"\")}</Fragment>;\n  };\n\n  const tagDisplay = (events: BucketReplicationRule) => {\n    return <Fragment>{events && events.tags !== \"\" ? \"Yes\" : \"No\"}</Fragment>;\n  };\n\n  const selectAllItems = () => {\n    if (selectedRepRules.length === replicationRules.length) {\n      setSelectedRepRules([]);\n      return;\n    }\n    setSelectedRepRules(replicationRules.map((x) => x.id));\n  };\n\n  const selectRules = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...selectedRepRules]; // We clone the selectedSAs array\n    if (checked) {\n      // If the user has checked this field we need to push this to selectedSAs\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    setSelectedRepRules(elements);\n    return elements;\n  };\n\n  const replicationTableActions: any = [\n    {\n      type: \"delete\",\n      onClick: confirmDeleteReplication,\n    },\n    {\n      type: \"view\",\n      onClick: editReplicationRule,\n      disableButtonFunction: !hasPermission(\n        bucketName,\n        [\n          IAM_SCOPES.S3_PUT_REPLICATION_CONFIGURATION,\n          IAM_SCOPES.S3_PUT_ACTIONS,\n        ],\n        true,\n      ),\n    },\n  ];\n\n  return (\n    <Fragment>\n      {openSetReplication && (\n        <AddReplicationModal\n          closeModalAndRefresh={closeAddReplication}\n          open={openSetReplication}\n          bucketName={bucketName}\n          setReplicationRules={replicationRules}\n        />\n      )}\n\n      {deleteReplicationModal && (\n        <DeleteReplicationRule\n          deleteOpen={deleteReplicationModal}\n          selectedBucket={bucketName}\n          closeDeleteModalAndRefresh={closeReplicationModalDelete}\n          ruleToDelete={selectedRRule}\n          rulesToDelete={selectedRepRules}\n          remainingRules={replicationRules.length}\n          allSelected={\n            replicationRules.length > 0 &&\n            selectedRepRules.length === replicationRules.length\n          }\n          deleteSelectedRules={deleteSelectedRules}\n        />\n      )}\n\n      {editReplicationModal && (\n        <EditReplicationModal\n          closeModalAndRefresh={closeEditReplication}\n          open={editReplicationModal}\n          bucketName={bucketName}\n          ruleID={selectedRRule}\n        />\n      )}\n      <SectionTitle\n        separator\n        sx={{ marginBottom: 15 }}\n        actions={\n          <Box style={{ display: \"flex\", gap: 10 }}>\n            <SecureComponent\n              scopes={[\n                IAM_SCOPES.S3_PUT_REPLICATION_CONFIGURATION,\n                IAM_SCOPES.S3_PUT_ACTIONS,\n              ]}\n              resource={bucketName}\n              matchAll\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper tooltip={\"Remove Selected Replication Rules\"}>\n                <Button\n                  id={\"remove-bucket-replication-rule\"}\n                  onClick={() => {\n                    confirmDeleteSelectedReplicationRules();\n                  }}\n                  label={\"Remove Selected Rules\"}\n                  icon={<TrashIcon />}\n                  color={\"secondary\"}\n                  disabled={\n                    selectedRepRules.length === 0 ||\n                    replicationRules.length === 0\n                  }\n                  variant={\"secondary\"}\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n            <SecureComponent\n              scopes={[\n                IAM_SCOPES.S3_PUT_REPLICATION_CONFIGURATION,\n                IAM_SCOPES.S3_PUT_ACTIONS,\n              ]}\n              resource={bucketName}\n              matchAll\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper tooltip={\"Add Replication Rule\"}>\n                <Button\n                  id={\"add-bucket-replication-rule\"}\n                  onClick={() => {\n                    navigate(\n                      IAM_PAGES.BUCKETS_ADD_REPLICATION +\n                        `?bucketName=${bucketName}&nextPriority=${\n                          replicationRules.length + 1\n                        }`,\n                    );\n                  }}\n                  label={\"Add Replication Rule\"}\n                  icon={<AddIcon />}\n                  variant={\"callAction\"}\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n          </Box>\n        }\n      >\n        <HelpTip\n          content={\n            <Fragment>\n              Server-side bucket replication is an automatic bucket-level configuration that synchronizes objects between a source and destination bucket.\n            </Fragment>\n          }\n          placement=\"right\"\n        >\n          Replication\n        </HelpTip>\n      </SectionTitle>\n      <Grid container>\n        <Grid item xs={12}>\n          <SecureComponent\n            scopes={[\n              IAM_SCOPES.S3_GET_REPLICATION_CONFIGURATION,\n              IAM_SCOPES.S3_GET_ACTIONS,\n            ]}\n            resource={bucketName}\n            errorProps={{ disabled: true }}\n          >\n            <DataTable\n              itemActions={replicationTableActions}\n              columns={[\n                {\n                  label: \"Priority\",\n                  elementKey: \"priority\",\n                  width: 55,\n                  contentTextAlign: \"center\",\n                },\n                {\n                  label: \"Destination\",\n                  elementKey: \"destination\",\n                  renderFunction: ruleDestDisplay,\n                },\n                {\n                  label: \"Prefix\",\n                  elementKey: \"prefix\",\n                  width: 200,\n                },\n                {\n                  label: \"Tags\",\n                  elementKey: \"tags\",\n                  renderFunction: tagDisplay,\n                  width: 60,\n                },\n                { label: \"Status\", elementKey: \"status\", width: 100 },\n              ]}\n              isLoading={loadingReplication}\n              records={replicationRules}\n              entityName=\"Replication Rules\"\n              idField=\"id\"\n              customPaperHeight={\"400px\"}\n              textSelectable\n              selectedItems={selectedRepRules}\n              onSelect={(e) => selectRules(e)}\n              onSelectAll={selectAllItems}\n            />\n          </SecureComponent>\n        </Grid>\n        <Grid item xs={12}>\n          <br />\n          <HelpBox\n            title={\"Replication\"}\n            iconComponent={<BucketsIcon />}\n            help={\n              <Fragment>\n                This supports server-side and client-side replication of\n                objects between source and destination buckets.\n              </Fragment>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default BucketReplicationPanel;\n"],"names":["EditReplicationModal","withSuspense","React","AddReplicationModal","DeleteReplicationRule","BucketReplicationPanel","dispatch","useAppDispatch","params","useParams","loadingBucket","useSelector","selBucketDetailsLoading","loadingReplication","setLoadingReplication","useState","replicationRules","setReplicationRules","deleteReplicationModal","setDeleteReplicationModal","openSetReplication","setOpenSetReplication","editReplicationModal","setEditReplicationModal","selectedRRule","setSelectedRRule","selectedRepRules","setSelectedRepRules","deleteSelectedRules","setDeleteSelectedRules","bucketName","displayReplicationRules","hasPermission","IAM_SCOPES","S3_GET_REPLICATION_CONFIGURATION","S3_GET_ACTIONS","useEffect","setHelpName","api","invoke","then","res","r","rules","sort","a","b","priority","catch","err","setErrorSnackMessage","setOpenReplicationOpen","arguments","length","undefined","navigate","useNavigate","replicationTableActions","type","onClick","replication","id","disableButtonFunction","S3_PUT_REPLICATION_CONFIGURATION","S3_PUT_ACTIONS","_jsxs","Fragment","children","_jsx","closeModalAndRefresh","closeAddReplication","open","deleteOpen","selectedBucket","closeDeleteModalAndRefresh","refresh","ruleToDelete","rulesToDelete","remainingRules","allSelected","ruleID","SectionTitle","separator","sx","marginBottom","actions","Box","style","display","gap","SecureComponent","scopes","resource","matchAll","errorProps","disabled","TooltipWrapper","tooltip","Button","label","icon","TrashIcon","color","variant","IAM_PAGES","BUCKETS_ADD_REPLICATION","AddIcon","HelpTip","content","placement","Grid","container","item","xs","DataTable","itemActions","columns","elementKey","width","contentTextAlign","renderFunction","events","bucket","replace","tags","isLoading","records","entityName","idField","customPaperHeight","textSelectable","selectedItems","onSelect","e","targetD","target","value","checked","elements","push","filter","element","selectRules","onSelectAll","selectAllItems","map","x","HelpBox","title","iconComponent","BucketsIcon","help"],"sourceRoot":""}
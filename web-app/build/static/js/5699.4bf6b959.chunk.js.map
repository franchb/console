{"version":3,"file":"static/js/5699.4bf6b959.chunk.js","mappings":"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","sources":["screens/Console/IDP/AddIDPConfigurationHelpbox.tsx","screens/Console/IDP/utils.tsx","screens/Console/IDP/IDPConfigurationDetails.tsx","screens/Console/IDP/IDPOpenIDConfigurationDetails.tsx","screens/Console/IDP/DeleteIDPConfigurationModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { HelpIconFilled, Box } from \"mds\";\n\ninterface IContent {\n  icon: React.ReactNode;\n  text: string;\n  iconDescription: string;\n}\n\ninterface IAddIDPConfigurationHelpBoxProps {\n  contents: IContent[];\n}\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <div style={{ fontSize: \"14px\", fontStyle: \"italic\", color: \"#5E5E5E\" }}>\n        {description}\n      </div>\n    </Box>\n  );\n};\n\nconst AddIDPConfigurationHelpBox = ({\n  contents,\n}: IAddIDPConfigurationHelpBoxProps) => {\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n      }}\n    >\n      <Box\n        sx={{\n          fontSize: \"16px\",\n          fontWeight: 600,\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: \"16px\",\n          paddingBottom: \"20px\",\n\n          \"& .min-icon\": {\n            height: \"21px\",\n            width: \"21px\",\n            marginRight: \"15px\",\n          },\n        }}\n      >\n        <HelpIconFilled />\n      </Box>\n      <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n        {contents.map((content, index) => (\n          <Fragment key={`feature-item-${index}`}>\n            {content.icon && (\n              <Box sx={{ paddingBottom: \"20px\" }}>\n                <FeatureItem\n                  icon={content.icon}\n                  description={content.iconDescription}\n                />\n              </Box>\n            )}\n            <Box sx={{ paddingBottom: \"20px\" }}>{content.text}</Box>\n          </Fragment>\n        ))}\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddIDPConfigurationHelpBox;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { LockIcon, LoginIcon } from \"mds\";\n\nexport const ldapHelpBoxContents = [\n  {\n    text: \"This option supports using an Active Directory or LDAP (AD/LDAP) service for external management of user identities. Configuring an external IDentity Provider (IDP) enables Single-Sign On (SSO) workflows, where applications authenticate against the external IDP before accessing the instance.\",\n    icon: <LoginIcon />,\n    iconDescription: \"Create Configurations\",\n  },\n  {\n    text: \"This queries the configured Active Directory / LDAP server to verify the credentials specified by the application and optionally return a list of groups in which the user has membership. This supports two modes (Lookup-Bind Mode and Username-Bind Mode) for performing these queries\",\n    icon: null,\n    iconDescription: \"\",\n  },\n  {\n    text: \"This recommends using Lookup-Bind mode as the preferred method for verifying AD/LDAP credentials. Username-Bind mode is a legacy method retained for backwards compatibility only.\",\n    icon: null,\n    iconDescription: \"\",\n  },\n];\n\nexport const openIDHelpBoxContents = [\n  {\n    text: \"This option supports using an OpenID Connect (OIDC) compatible IDentity Provider (IDP) such as Okta, KeyCloak, Dex, Google, or Facebook for external management of user identities.\",\n    icon: <LockIcon />,\n    iconDescription: \"Create Configurations\",\n  },\n  {\n    text: \"Configuring an external IDP enables Single-Sign On workflows, where applications authenticate against the external IDP before accessing the instance.\",\n    icon: null,\n    iconDescription: \"\",\n  },\n];\n\nexport const openIDFormFields = {\n  config_url: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Config URL is required\" : \"\";\n    },\n    label: \"Config URL\",\n    tooltip: \"Config URL for identity provider configuration\",\n    placeholder:\n      \"https://identity-provider-url/.well-known/openid-configuration\",\n    type: \"text\",\n    editOnly: false,\n  },\n  client_id: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Client ID is required\" : \"\";\n    },\n    label: \"Client ID\",\n    tooltip: \"Identity provider Client ID\",\n    placeholder: \"Enter Client ID\",\n    type: \"text\",\n    editOnly: false,\n  },\n  client_secret: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Client Secret is required\" : \"\";\n    },\n    label: \"Client Secret\",\n    tooltip: \"Identity provider Client Secret\",\n    placeholder: \"Enter Client Secret\",\n    type: \"password\",\n    editOnly: true,\n  },\n  claim_name: {\n    required: false,\n    label: \"Claim Name\",\n    tooltip: \"Claim from which the instance will read the policy or role to use\",\n    placeholder: \"Enter Claim Name\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  display_name: {\n    required: false,\n    label: \"Display Name\",\n    tooltip: \"\",\n    placeholder: \"Enter Display Name\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  claim_prefix: {\n    required: false,\n    label: \"Claim Prefix\",\n    tooltip: \"\",\n    placeholder: \"Enter Claim Prefix\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  scopes: {\n    required: false,\n    label: \"Scopes\",\n    tooltip: \"\",\n    placeholder: \"openid,profile,email\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  redirect_uri: {\n    required: false,\n    label: \"Redirect URI\",\n    tooltip: \"\",\n    placeholder: \"https://console-endpoint-url/oauth_callback\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  role_policy: {\n    required: false,\n    label: \"Role Policy\",\n    tooltip: \"\",\n    placeholder: \"readonly\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  claim_userinfo: {\n    required: false,\n    label: \"Claim User Info\",\n    tooltip: \"\",\n    placeholder: \"Claim User Info\",\n    type: \"toggle\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  redirect_uri_dynamic: {\n    required: false,\n    label: \"Redirect URI Dynamic\",\n    tooltip: \"\",\n    placeholder: \"Redirect URI Dynamic\",\n    type: \"toggle\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n};\n\nexport const ldapFormFields = {\n  server_insecure: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Server Address is required\" : \"\";\n    },\n    label: \"Server Insecure\",\n    tooltip: \"Disable SSL certificate verification \",\n    placeholder: \"myldapserver.com:636\",\n    type: \"toggle\",\n    editOnly: false,\n  },\n  server_addr: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Server Address is required\" : \"\";\n    },\n    label: \"Server Address\",\n    tooltip: 'AD/LDAP server address e.g. \"myldapserver.com:636\"',\n    placeholder: \"myldapserver.com:636\",\n    type: \"text\",\n    editOnly: false,\n  },\n  lookup_bind_dn: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Lookup Bind DN is required\" : \"\";\n    },\n    label: \"Lookup Bind DN\",\n    tooltip:\n      \"DN (Distinguished Name) for LDAP read-only service account used to perform DN and group lookups\",\n    placeholder: \"cn=admin,dc=min,dc=io\",\n    type: \"text\",\n    editOnly: false,\n  },\n  lookup_bind_password: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Lookup Bind Password is required\" : \"\";\n    },\n    label: \"Lookup Bind Password\",\n    tooltip:\n      \"Password for LDAP read-only service account used to perform DN and group lookups\",\n    placeholder: \"admin\",\n    type: \"password\",\n    editOnly: true,\n  },\n  user_dn_search_base_dn: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"User DN Search Base DN is required\" : \"\";\n    },\n    label: \"User DN Search Base\",\n    tooltip: \"\",\n    placeholder: \"DC=example,DC=net\",\n    type: \"text\",\n    editOnly: false,\n  },\n  user_dn_search_filter: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"User DN Search Filter is required\" : \"\";\n    },\n    label: \"User DN Search Filter\",\n    tooltip: \"\",\n    placeholder: \"(sAMAcountName=%s)\",\n    type: \"text\",\n    editOnly: false,\n  },\n  group_search_base_dn: {\n    required: false,\n    hasError: (s: string, editMode: boolean) => \"\",\n    label: \"Group Search Base DN\",\n    tooltip: \"\",\n    placeholder: \"ou=swengg,dc=min,dc=io\",\n    type: \"text\",\n    editOnly: false,\n  },\n  group_search_filter: {\n    required: false,\n    hasError: (s: string, editMode: boolean) => \"\",\n    label: \"Group Search Filter\",\n    tooltip: \"\",\n    placeholder: \"(&(objectclass=groupofnames)(member=%d))\",\n    type: \"text\",\n    editOnly: false,\n  },\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport {\n  BackLink,\n  Box,\n  breakPoints,\n  Button,\n  ConsoleIcon,\n  EditIcon,\n  FormLayout,\n  Grid,\n  HelpBox,\n  InputBox,\n  PageLayout,\n  RefreshIcon,\n  ScreenTitle,\n  Switch,\n  Tooltip,\n  TrashIcon,\n  ValuePair,\n  WarnIcon,\n} from \"mds\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { useAppDispatch } from \"../../../store\";\nimport {\n  setErrorSnackMessage,\n  setHelpName,\n  setServerNeedsRestart,\n} from \"../../../systemSlice\";\nimport DeleteIDPConfigurationModal from \"./DeleteIDPConfigurationModal\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport { api } from \"api\";\nimport {\n  ApiError,\n  HttpResponse,\n  IdpServerConfiguration,\n  SetIDPResponse,\n} from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\n\ntype IDPConfigurationDetailsProps = {\n  formFields: object;\n  endpoint: string;\n  backLink: string;\n  header: string;\n  idpType: string;\n  helpBox: React.ReactNode;\n  icon: React.ReactNode;\n};\n\nconst IDPConfigurationDetails = ({\n  formFields,\n  endpoint,\n  backLink,\n  header,\n  idpType,\n  icon,\n  helpBox,\n}: IDPConfigurationDetailsProps) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const params = useParams();\n\n  const configurationName = params.idpName;\n\n  const [loadingDetails, setLoadingDetails] = useState<boolean>(true);\n  const [loadingSave, setLoadingSave] = useState<boolean>(false);\n  const [loadingEnabledSave, setLoadingEnabledSave] = useState<boolean>(false);\n  const [isEnabled, setIsEnabled] = useState<boolean>(false);\n  const [fields, setFields] = useState<any>({});\n  const [overrideFields, setOverrideFields] = useState<any>({});\n  const [originalFields, setOriginalFields] = useState<any>({});\n  const [record, setRecord] = useState<any>({});\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [envOverride, setEnvOverride] = useState<boolean>(false);\n\n  const parseFields = useCallback(\n    (record: any) => {\n      let fields: any = {};\n      let overrideFields: any = {};\n      let totEnv = 0;\n\n      if (record.info) {\n        record.info.forEach((item: any) => {\n          if (item.key === \"enable\") {\n            setIsEnabled(item.value === \"on\");\n          }\n\n          if (item.isEnv) {\n            overrideFields[item.key] =\n              `MINIO_IDENTITY_OPENID_${item.key.toUpperCase()}${\n                configurationName !== \"_\" ? `_${configurationName}` : \"\"\n              }`;\n            totEnv++;\n          }\n\n          fields[item.key] = item.value;\n        });\n\n        if (totEnv > 0) {\n          setEnvOverride(true);\n        }\n      }\n      setFields(fields);\n      setOverrideFields(overrideFields);\n    },\n    [configurationName],\n  );\n\n  const toggleEditMode = () => {\n    if (editMode) {\n      parseFields(record);\n    }\n    setEditMode(!editMode);\n  };\n\n  const parseOriginalFields = (record: any) => {\n    let fields: any = {};\n    if (record.info) {\n      record.info.forEach((item: any) => {\n        fields[item.key] = item.value;\n      });\n    }\n    setOriginalFields(fields);\n  };\n\n  useEffect(() => {\n    const loadRecord = () => {\n      api.idp\n        .getConfiguration(configurationName || \"\", \"openid\")\n        .then((res: HttpResponse<IdpServerConfiguration, ApiError>) => {\n          if (res.data) {\n            setRecord(res.data);\n            parseFields(res.data);\n            parseOriginalFields(res.data);\n          }\n        })\n        .catch((res: HttpResponse<IdpServerConfiguration, ApiError>) => {\n          dispatch(setErrorSnackMessage(errorToHandler(res.error)));\n        })\n        .finally(() => setLoadingDetails(false));\n    };\n\n    if (loadingDetails) {\n      loadRecord();\n    }\n  }, [dispatch, loadingDetails, configurationName, endpoint, parseFields]);\n\n  const validSave = () => {\n    for (const [key, value] of Object.entries(formFields)) {\n      if (\n        value.required &&\n        !(\n          fields[key] !== undefined &&\n          fields[key] !== null &&\n          fields[key] !== \"\"\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const resetForm = () => {\n    setFields({});\n  };\n\n  const saveRecord = (event: React.FormEvent) => {\n    setLoadingSave(true);\n    event.preventDefault();\n    let input = \"\";\n    for (const key of Object.keys(formFields)) {\n      if (fields[key] || fields[key] !== originalFields[key]) {\n        input += `${key}=${fields[key]} `;\n      }\n    }\n\n    api.idp\n      .updateConfiguration(configurationName || \"\", \"openid\", { input })\n      .then((res: HttpResponse<SetIDPResponse, ApiError>) => {\n        if (res.data) {\n          dispatch(setServerNeedsRestart(res.data.restart === true));\n          setEditMode(false);\n        }\n      })\n      .catch(async (res: HttpResponse<SetIDPResponse, ApiError>) => {\n        dispatch(setErrorSnackMessage(errorToHandler(res.error)));\n      })\n      .finally(() => setLoadingSave(false));\n  };\n\n  const closeDeleteModalAndRefresh = async (refresh: boolean) => {\n    setDeleteOpen(false);\n\n    if (refresh) {\n      navigate(backLink);\n    }\n  };\n\n  const toggleConfiguration = (value: boolean) => {\n    setLoadingEnabledSave(true);\n    const input = `enable=${value ? \"on\" : \"off\"}`;\n\n    api.idp\n      .updateConfiguration(configurationName || \"\", \"openid\", { input: input })\n      .then((res: HttpResponse<SetIDPResponse, ApiError>) => {\n        if (res.data) {\n          setIsEnabled(!isEnabled);\n          dispatch(setServerNeedsRestart(res.data.restart === true));\n        }\n      })\n      .catch((res: HttpResponse<SetIDPResponse, ApiError>) => {\n        dispatch(setErrorSnackMessage(errorToHandler(res.error)));\n      })\n      .finally(() => setLoadingEnabledSave(false));\n  };\n\n  const renderFormField = (key: string, value: any) => {\n    switch (value.type) {\n      case \"toggle\":\n        return (\n          <Switch\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={fields[key] === \"on\"}\n            value={\"is-field-enabled\"}\n            id={\"is-field-enabled\"}\n            name={\"is-field-enabled\"}\n            label={value.label}\n            tooltip={value.tooltip}\n            onChange={(e) =>\n              setFields({ ...fields, [key]: e.target.checked ? \"on\" : \"off\" })\n            }\n            description=\"\"\n            disabled={!editMode}\n          />\n        );\n      default:\n        return (\n          <InputBox\n            id={key}\n            required={value.required}\n            name={key}\n            label={value.label}\n            tooltip={value.tooltip}\n            error={value.hasError(fields[key], editMode)}\n            value={fields[key] ? fields[key] : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setFields({ ...fields, [key]: e.target.value })\n            }\n            placeholder={value.placeholder}\n            disabled={!editMode}\n            type={value.type}\n          />\n        );\n    }\n  };\n\n  const renderEditForm = () => {\n    return (\n      <FormLayout helpBox={helpBox}>\n        <form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n            saveRecord(e);\n          }}\n        >\n          <Grid container>\n            {editMode ? (\n              <Grid item xs={12} sx={{ marginBottom: 15 }}>\n                <HelpBox\n                  title={\n                    <Box\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        alignItems: \"center\",\n                        flexGrow: 1,\n                      }}\n                    >\n                      Client Secret must be re-entered to change OpenID\n                      configurations\n                    </Box>\n                  }\n                  iconComponent={<WarnIcon />}\n                  help={null}\n                />\n              </Grid>\n            ) : null}\n            <Grid xs={12} item>\n              {Object.entries(formFields).map(([key, value]) =>\n                renderFormField(key, value),\n              )}\n              <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n                {editMode && (\n                  <Button\n                    id={\"clear\"}\n                    type=\"button\"\n                    variant=\"regular\"\n                    onClick={resetForm}\n                    label={\"Clear\"}\n                  />\n                )}\n                {editMode && (\n                  <Button\n                    id={\"cancel\"}\n                    type=\"button\"\n                    variant=\"regular\"\n                    onClick={toggleEditMode}\n                    label={\"Cancel\"}\n                  />\n                )}\n                {editMode && (\n                  <Button\n                    id={\"save-key\"}\n                    type=\"submit\"\n                    variant=\"callAction\"\n                    color=\"primary\"\n                    disabled={loadingDetails || loadingSave || !validSave()}\n                    label={\"Save\"}\n                  />\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n      </FormLayout>\n    );\n  };\n  const renderViewForm = () => {\n    return (\n      <Box\n        withBorders\n        sx={{\n          display: \"grid\",\n          gridTemplateColumns: \"1fr\",\n          gridAutoFlow: \"dense\",\n          gap: 3,\n          padding: \"15px\",\n          [`@media (min-width: ${breakPoints.sm}px)`]: {\n            gridTemplateColumns: \"2fr 1fr\",\n            gridAutoFlow: \"row\",\n          },\n        }}\n      >\n        {Object.entries(formFields).map(([key, value]) => {\n          if (!value.editOnly) {\n            let label: React.ReactNode = value.label;\n            let val: React.ReactNode = fields[key] ? fields[key] : \"\";\n\n            if (value.type === \"toggle\" && fields[key]) {\n              if (val !== \"on\") {\n                val = \"Off\";\n              } else {\n                val = \"On\";\n              }\n            }\n\n            if (overrideFields[key]) {\n              label = (\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: 5,\n                    \"& .min-icon\": {\n                      height: 20,\n                      width: 20,\n                    },\n                    \"& span\": {\n                      height: 20,\n                      display: \"flex\",\n                      alignItems: \"center\",\n                    },\n                  }}\n                >\n                  <span>{value.label}</span>\n                  <Tooltip\n                    tooltip={`This value is set from the ${overrideFields[key]} environment variable`}\n                    placement={\"right\"}\n                  >\n                    <span className={\"muted\"}>\n                      <ConsoleIcon />\n                    </span>\n                  </Tooltip>\n                </Box>\n              );\n\n              val = (\n                <i>\n                  <span className={\"muted\"}>{val}</span>\n                </i>\n              );\n            }\n            return <ValuePair key={key} label={label} value={val} />;\n          }\n          return null;\n        })}\n      </Box>\n    );\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"idp_config\"));\n  }, [dispatch]);\n\n  return (\n    <Fragment>\n      {deleteOpen && configurationName && (\n        <DeleteIDPConfigurationModal\n          deleteOpen={deleteOpen}\n          idp={configurationName}\n          idpType={idpType}\n          closeDeleteModalAndRefresh={closeDeleteModalAndRefresh}\n        />\n      )}\n      <Grid item xs={12}>\n        <PageHeaderWrapper\n          label={<BackLink onClick={() => navigate(backLink)} label={header} />}\n          actions={<HelpMenu />}\n        />\n        <PageLayout>\n          <ScreenTitle\n            icon={icon}\n            title={\n              configurationName === \"_\" ? \"Default\" : configurationName || \"\"\n            }\n            subTitle={null}\n            actions={\n              <Fragment>\n                {configurationName !== \"_\" && (\n                  <Tooltip\n                    tooltip={\n                      envOverride\n                        ? \"This configuration cannot be deleted using this module as this was set using OpenID environment variables.\"\n                        : \"\"\n                    }\n                  >\n                    <Button\n                      id={\"delete-idp-config\"}\n                      onClick={() => {\n                        setDeleteOpen(true);\n                      }}\n                      label={\"Delete Configuration\"}\n                      icon={<TrashIcon />}\n                      variant={\"secondary\"}\n                      disabled={envOverride}\n                    />\n                  </Tooltip>\n                )}\n                {!editMode && (\n                  <Tooltip\n                    tooltip={\n                      envOverride\n                        ? \"Configuration cannot be edited in this module as OpenID environment variables are set for this instance.\"\n                        : \"\"\n                    }\n                  >\n                    <Button\n                      id={\"edit\"}\n                      type=\"button\"\n                      variant={\"callAction\"}\n                      icon={<EditIcon />}\n                      onClick={toggleEditMode}\n                      label={\"Edit\"}\n                      disabled={envOverride}\n                    />\n                  </Tooltip>\n                )}\n                <Tooltip\n                  tooltip={\n                    envOverride\n                      ? \"Configuration cannot be disabled / enabled in this module as OpenID environment variables are set for this instance.\"\n                      : \"\"\n                  }\n                >\n                  <Button\n                    id={\"is-configuration-enabled\"}\n                    onClick={() => toggleConfiguration(!isEnabled)}\n                    label={isEnabled ? \"Disable\" : \"Enable\"}\n                    disabled={loadingEnabledSave || envOverride}\n                  />\n                </Tooltip>\n                <Button\n                  id={\"refresh-idp-config\"}\n                  onClick={() => setLoadingDetails(true)}\n                  label={\"Refresh\"}\n                  icon={<RefreshIcon />}\n                />\n              </Fragment>\n            }\n            sx={{\n              marginBottom: 15,\n            }}\n          />\n          {editMode ? renderEditForm() : renderViewForm()}\n        </PageLayout>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default IDPConfigurationDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport { LockIcon } from \"mds\";\nimport { openIDFormFields, openIDHelpBoxContents } from \"./utils\";\nimport IDPConfigurationDetails from \"./IDPConfigurationDetails\";\nimport AddIDPConfigurationHelpBox from \"./AddIDPConfigurationHelpbox\";\n\nconst IDPOpenIDConfigurationDetails = () => {\n  return (\n    <IDPConfigurationDetails\n      backLink={IAM_PAGES.IDP_OPENID_CONFIGURATIONS}\n      header={\"OpenID Configurations\"}\n      endpoint={\"/api/v1/idp/openid/\"}\n      idpType={\"openid\"}\n      helpBox={\n        <AddIDPConfigurationHelpBox\n          contents={openIDHelpBoxContents}\n        />\n      }\n      formFields={openIDFormFields}\n      icon={<LockIcon width={40} />}\n    />\n  );\n};\n\nexport default IDPOpenIDConfigurationDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport {\n  setErrorSnackMessage,\n  setServerNeedsRestart,\n} from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { api } from \"api\";\nimport { SetIDPResponse } from \"../../../api/consoleApi\";\nimport { errorToHandler } from \"../../../api/errors\";\n\ninterface IDeleteIDPConfigurationModalProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  idp: string;\n  idpType: string;\n}\n\nconst DeleteIDPConfigurationModal = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  idp,\n  idpType,\n}: IDeleteIDPConfigurationModalProps) => {\n  const dispatch = useAppDispatch();\n  const onDelSuccess = (res: SetIDPResponse) => {\n    closeDeleteModalAndRefresh(true);\n    dispatch(setServerNeedsRestart(res.restart === true));\n  };\n\n  const onClose = () => closeDeleteModalAndRefresh(false);\n  const [deleteLoading, setDeleteLoading] = useState<boolean>(false);\n\n  if (!idp) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    setDeleteLoading(true);\n    api.idp\n      .deleteConfiguration(idp, idpType)\n      .then((res) => {\n        onDelSuccess(res.data);\n      })\n      .catch((err) => dispatch(setErrorSnackMessage(errorToHandler(err.error))))\n      .finally(() => setDeleteLoading(false));\n  };\n\n  const displayName = idp === \"_\" ? \"Default\" : idp;\n\n  return (\n    <ConfirmDialog\n      title={`Delete ${displayName}`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: deleteLoading,\n      }}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete IDP <b>{displayName}</b>{\" \"}\n          configuration? <br />\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteIDPConfigurationModal;\n"],"names":["FeatureItem","_ref","icon","description","_jsxs","Box","sx","display","marginRight","height","width","marginBottom","children","_jsx","style","fontSize","fontStyle","color","_ref2","contents","flex","border","borderRadius","flexFlow","padding","fontWeight","alignItems","paddingBottom","HelpIconFilled","map","content","index","Fragment","iconDescription","text","ldapHelpBoxContents","LoginIcon","openIDHelpBoxContents","LockIcon","openIDFormFields","config_url","required","hasError","s","editMode","label","tooltip","placeholder","type","editOnly","client_id","client_secret","claim_name","display_name","claim_prefix","scopes","redirect_uri","role_policy","claim_userinfo","redirect_uri_dynamic","ldapFormFields","server_insecure","server_addr","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter","formFields","endpoint","backLink","header","idpType","helpBox","dispatch","useAppDispatch","navigate","useNavigate","configurationName","useParams","idpName","loadingDetails","setLoadingDetails","useState","loadingSave","setLoadingSave","loadingEnabledSave","setLoadingEnabledSave","isEnabled","setIsEnabled","fields","setFields","overrideFields","setOverrideFields","originalFields","setOriginalFields","record","setRecord","setEditMode","deleteOpen","setDeleteOpen","envOverride","setEnvOverride","parseFields","useCallback","totEnv","info","forEach","item","key","value","isEnv","toUpperCase","toggleEditMode","useEffect","loadRecord","api","idp","getConfiguration","then","res","data","parseOriginalFields","catch","setErrorSnackMessage","errorToHandler","error","finally","validSave","Object","entries","undefined","resetForm","setHelpName","DeleteIDPConfigurationModal","closeDeleteModalAndRefresh","async","refresh","Grid","xs","PageHeaderWrapper","BackLink","onClick","actions","HelpMenu","PageLayout","ScreenTitle","title","subTitle","Tooltip","Button","id","TrashIcon","variant","disabled","EditIcon","input","updateConfiguration","setServerNeedsRestart","restart","toggleConfiguration","RefreshIcon","FormLayout","noValidate","autoComplete","onSubmit","e","event","preventDefault","keys","saveRecord","container","HelpBox","justifyContent","flexGrow","iconComponent","WarnIcon","help","renderFormField","Switch","indicatorLabels","checked","name","onChange","target","InputBox","modalStyleUtils","modalButtonBar","withBorders","gridTemplateColumns","gridAutoFlow","gap","breakPoints","sm","_ref3","val","placement","className","ConsoleIcon","ValuePair","IDPOpenIDConfigurationDetails","IDPConfigurationDetails","IAM_PAGES","IDP_OPENID_CONFIGURATIONS","AddIDPConfigurationHelpBox","deleteLoading","setDeleteLoading","displayName","ConfirmDialog","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","isLoading","onConfirm","onConfirmDelete","deleteConfiguration","onDelSuccess","err","onClose","confirmButtonProps","confirmationContent"],"sourceRoot":""}
{"version":3,"file":"static/js/843.a3d66264.chunk.js","mappings":"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","sources":["../node_modules/react-use-websocket/src/lib/manage-subscribers.ts","../node_modules/react-use-websocket/src/lib/use-websocket.ts","../node_modules/react-use-websocket/src/index.ts","../node_modules/react-use-websocket/src/lib/constants.ts","../node_modules/react-use-websocket/src/lib/get-url.ts","../node_modules/react-use-websocket/src/lib/util.ts","screens/Console/Trace/Trace.tsx","../node_modules/react-use-websocket/src/lib/attach-shared-listeners.ts","../node_modules/react-use-websocket/src/lib/use-socket-io.ts","../node_modules/react-use-websocket/src/lib/use-event-source.ts","../node_modules/react-use-websocket/src/lib/socket-io.ts","../node_modules/react-use-websocket/src/lib/globals.ts","../node_modules/react-use-websocket/src/lib/attach-listener.ts","../node_modules/react-use-websocket/src/lib/create-or-join.ts","../node_modules/react-use-websocket/src/lib/proxy.ts","../node_modules/react-use-websocket/src/lib/heartbeat.ts"],"sourcesContent":["import { Subscriber } from './types';\n\nexport type Subscribers = {\n    [url: string]: Set<Subscriber>,\n}\n  \nconst subscribers: Subscribers = {};\nconst EMPTY_LIST: Subscriber[] = [];\n\nexport const getSubscribers = (url: string): Subscriber[] => {\n    if (hasSubscribers(url)) {\n        return Array.from(subscribers[url]);\n    }\n    return EMPTY_LIST;\n};\n\nexport const hasSubscribers = (url: string): boolean => {\n    return subscribers[url]?.size > 0;\n};\n\nexport const addSubscriber = (url: string, subscriber: Subscriber): void => {\n    subscribers[url] = subscribers[url] || new Set<Subscriber>();\n    subscribers[url].add(subscriber);\n};\n\nexport const removeSubscriber = (url: string, subscriber: Subscriber): void => {\n    subscribers[url].delete(subscriber);\n};\n\nexport const resetSubscribers = (url?: string): void => {\n    if (url && subscribers.hasOwnProperty(url)) {\n        delete subscribers[url];\n    } else {\n        for (let url in subscribers){\n            if (subscribers.hasOwnProperty(url)){\n                delete subscribers[url];\n            }\n        }\n    }\n}\n","import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\nimport { flushSync } from 'react-dom';\nimport { DEFAULT_OPTIONS, isEventSourceSupported, ReadyState, UNPARSABLE_JSON_OBJECT } from './constants';\nimport { createOrJoinSocket } from './create-or-join';\nimport { getUrl } from './get-url';\nimport websocketWrapper from './proxy';\nimport {\n  Options,\n  ReadyStateState,\n  SendMessage,\n  SendJsonMessage,\n  WebSocketMessage,\n  WebSocketHook,\n  WebSocketLike,\n} from './types';\nimport { assertIsWebSocket } from './util';\n\nexport const useWebSocket = <T = unknown>(\n  url: string | (() => string | Promise<string>) | null,\n  options: Options = DEFAULT_OPTIONS,\n  connect: boolean = true,\n): WebSocketHook<T> => {\n  const [lastMessage, setLastMessage] = useState<WebSocketEventMap['message'] | null>(null);\n  const [readyState, setReadyState] = useState<ReadyStateState>({});\n  const lastJsonMessage: T = useMemo(() => {\n    if (!options.disableJson && lastMessage) {\n      try {\n        return JSON.parse(lastMessage.data);\n      } catch (e) {\n        return UNPARSABLE_JSON_OBJECT;\n      }\n    }\n    return null;\n  }, [lastMessage, options.disableJson]);\n  const convertedUrl = useRef<string | null>(null);\n  const webSocketRef = useRef<WebSocketLike | null>(null);\n  const startRef = useRef<() => void>(() => void 0);\n  const reconnectCount = useRef<number>(0);\n  const lastMessageTime = useRef<number>(Date.now());\n  const messageQueue = useRef<WebSocketMessage[]>([]);\n  const webSocketProxy = useRef<WebSocketLike | null>(null);\n  const optionsCache = useRef<Options>(options);\n  optionsCache.current = options;\n\n  const readyStateFromUrl: ReadyState =\n    convertedUrl.current && readyState[convertedUrl.current] !== undefined ?\n      readyState[convertedUrl.current] :\n      url !== null && connect === true ?\n        ReadyState.CONNECTING :\n        ReadyState.UNINSTANTIATED;\n\n  const stringifiedQueryParams = options.queryParams ? JSON.stringify(options.queryParams) : null;\n\n  const sendMessage: SendMessage = useCallback((message, keep = true) => {\n    if (isEventSourceSupported && webSocketRef.current instanceof EventSource) {\n      console.warn('Unable to send a message from an eventSource');\n      return;\n    }\n\n    if (webSocketRef.current?.readyState === ReadyState.OPEN) {\n      assertIsWebSocket(webSocketRef.current, optionsCache.current.skipAssert);\n      webSocketRef.current.send(message);\n    } else if (keep) {\n      messageQueue.current.push(message);\n    }\n  }, []);\n\n  const sendJsonMessage: SendJsonMessage = useCallback((message, keep = true) => {\n    sendMessage(JSON.stringify(message), keep);\n  }, [sendMessage]);\n\n  const getWebSocket = useCallback(() => {\n    if (optionsCache.current.share !== true || (isEventSourceSupported && webSocketRef.current instanceof EventSource)) {\n      return webSocketRef.current;\n    }\n\n    if (webSocketProxy.current === null && webSocketRef.current) {\n      assertIsWebSocket(webSocketRef.current, optionsCache.current.skipAssert);\n      webSocketProxy.current = websocketWrapper(webSocketRef.current, startRef);\n    }\n\n    return webSocketProxy.current;\n  }, []);\n\n  useEffect(() => {\n    if (url !== null && connect === true) {\n      let removeListeners: () => void;\n      let expectClose = false;\n      let createOrJoin = true;\n\n      const start = async () => {\n        convertedUrl.current = await getUrl(url, optionsCache);\n\n        if (convertedUrl.current === null) {\n          console.error('Failed to get a valid URL. WebSocket connection aborted.');\n          convertedUrl.current = 'ABORTED';\n          flushSync(() => setReadyState(prev => ({\n            ...prev,\n            ABORTED: ReadyState.CLOSED,\n          })));\n\n          return;\n        }\n\n        const protectedSetLastMessage = (message: WebSocketEventMap['message']) => {\n          if (!expectClose) {\n            flushSync(() => setLastMessage(message));\n          }\n        };\n\n        const protectedSetReadyState = (state: ReadyState) => {\n          if (!expectClose) {\n            flushSync(() => setReadyState(prev => ({\n              ...prev,\n              ...(convertedUrl.current && { [convertedUrl.current]: state }),\n            })));\n          }\n        };\n\n        if (createOrJoin) {\n          removeListeners = createOrJoinSocket(\n            webSocketRef,\n            convertedUrl.current,\n            protectedSetReadyState,\n            optionsCache,\n            protectedSetLastMessage,\n            startRef,\n            reconnectCount,\n            lastMessageTime,\n            sendMessage,\n          );\n        }\n      };\n\n      startRef.current = () => {\n        if (!expectClose) {\n          if (webSocketProxy.current) webSocketProxy.current = null;\n          removeListeners?.();\n          start();\n        }\n      };\n\n      start();\n      return () => {\n        expectClose = true;\n        createOrJoin = false;\n        if (webSocketProxy.current) webSocketProxy.current = null;\n        removeListeners?.();\n        setLastMessage(null);\n      };\n    } else if (url === null || connect === false) {\n      reconnectCount.current = 0; // reset reconnection attempts\n      setReadyState(prev => ({\n        ...prev,\n        ...(convertedUrl.current && { [convertedUrl.current]: ReadyState.CLOSED }),\n      }));\n    }\n  }, [url, connect, stringifiedQueryParams, sendMessage]);\n\n  useEffect(() => {\n    if (readyStateFromUrl === ReadyState.OPEN) {\n      messageQueue.current.splice(0).forEach(message => {\n        sendMessage(message);\n      });\n    }\n  }, [readyStateFromUrl]);\n\n  return {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage,\n    lastJsonMessage,\n    readyState: readyStateFromUrl,\n    getWebSocket,\n  };\n};\n","export { useWebSocket as default } from './lib/use-websocket';\n\nexport { SendMessage, Options } from './lib/types';\n\nexport { useSocketIO } from './lib/use-socket-io';\n\nexport { ReadyState } from './lib/constants';\n\nexport { useEventSource } from './lib/use-event-source';\n\nexport { resetGlobalState } from './lib/util';\n","import { EventSourceEventHandlers, EventSourceOptions } from \"./types\";\n\nconst MILLISECONDS = 1;\nconst SECONDS = 1000 * MILLISECONDS;\n\nexport const DEFAULT_OPTIONS = {};\nexport const EMPTY_EVENT_HANDLERS: EventSourceEventHandlers = {};\nexport const DEFAULT_EVENT_SOURCE_OPTIONS: EventSourceOptions = {\n  withCredentials: false,\n  events: EMPTY_EVENT_HANDLERS,\n};\nexport const SOCKET_IO_PING_INTERVAL = 25 * SECONDS;\nexport const SOCKET_IO_PATH = '/socket.io/?EIO=3&transport=websocket';\nexport const SOCKET_IO_PING_CODE = '2';\nexport const DEFAULT_RECONNECT_LIMIT = 20;\nexport const DEFAULT_RECONNECT_INTERVAL_MS = 5000;\nexport const UNPARSABLE_JSON_OBJECT = {};\nexport const DEFAULT_HEARTBEAT = {\n  message: 'ping',\n  timeout: 60000,\n  interval: 25000,\n};\n\nexport enum ReadyState {\n  UNINSTANTIATED = -1,\n  CONNECTING = 0,\n  OPEN = 1,\n  CLOSING = 2,\n  CLOSED = 3,\n}\n\nconst eventSourceSupported = () => {\n  try {\n    return 'EventSource' in globalThis;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative';\nexport const isEventSourceSupported = !isReactNative && eventSourceSupported();\n","import { MutableRefObject } from 'react';\nimport { parseSocketIOUrl, appendQueryParams } from './socket-io';\nimport { Options } from './types';\nimport { DEFAULT_RECONNECT_INTERVAL_MS, DEFAULT_RECONNECT_LIMIT } from './constants';\n\nconst waitFor = (duration: number) => new Promise(resolve => window.setTimeout(resolve, duration));\n\nexport const getUrl = async (\n  url: string | (() => string | Promise<string>),\n  optionsRef: MutableRefObject<Options>,\n  retriedAttempts: number = 0,\n): Promise<string | null> => {\n  let convertedUrl: string;\n\n  if (typeof url === 'function') {\n    try {\n      convertedUrl = await url();\n    } catch (e) {\n      if (\n        optionsRef.current.retryOnError\n      ) {\n        const reconnectLimit = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n        if (retriedAttempts < reconnectLimit) {\n            const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\n              optionsRef.current.reconnectInterval(retriedAttempts) :\n              optionsRef.current.reconnectInterval;\n    \n            await waitFor(nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n            return getUrl(url, optionsRef, retriedAttempts + 1);\n          } else {\n            optionsRef.current.onReconnectStop?.(retriedAttempts);\n            return null;\n          }\n      } else {\n        return null;\n      }\n    }\n  } else {\n    convertedUrl = url;\n  }\n\n  const parsedUrl = optionsRef.current.fromSocketIO ?\n    parseSocketIOUrl(convertedUrl) :\n    convertedUrl;\n\n  const parsedWithQueryParams = optionsRef.current.queryParams ?\n    appendQueryParams(\n      parsedUrl,\n      optionsRef.current.queryParams\n    ) :\n    parsedUrl;\n\n  return parsedWithQueryParams;\n};\n","import { WebSocketLike } from './types';\nimport { resetWebSockets } from './globals';\nimport { resetSubscribers } from './manage-subscribers';\n\nexport function assertIsWebSocket (\n    webSocketInstance: WebSocketLike,\n    skip?: boolean,\n): asserts webSocketInstance is WebSocket {\n    if (!skip && webSocketInstance instanceof WebSocket === false) throw new Error('');\n};\n\n\nexport function resetGlobalState (url?: string): void {\n    resetSubscribers(url);\n    resetWebSockets(url);\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Fragment, useEffect, useState } from \"react\";\nimport { DateTime } from \"luxon\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Box,\n  breakPoints,\n  Button,\n  Checkbox,\n  DataTable,\n  FilterIcon,\n  Grid,\n  InputBox,\n  PageLayout,\n} from \"mds\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { TraceMessage } from \"./types\";\nimport { niceBytes, timeFromDate } from \"../../../common/utils\";\nimport { wsProtocol } from \"../../../utils/wsUtils\";\nimport {\n  setTraceStarted,\n  traceMessageReceived,\n  traceResetMessages,\n} from \"./traceSlice\";\nimport { setHelpName } from \"../../../systemSlice\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\n\nconst Trace = () => {\n  const dispatch = useAppDispatch();\n\n  const messages = useSelector((state: AppState) => state.trace.messages);\n  const traceStarted = useSelector(\n    (state: AppState) => state.trace.traceStarted,\n  );\n\n  const [statusCode, setStatusCode] = useState<string>(\"\");\n  const [method, setMethod] = useState<string>(\"\");\n  const [func, setFunc] = useState<string>(\"\");\n  const [path, setPath] = useState<string>(\"\");\n  const [threshold, setThreshold] = useState<number>(0);\n  const [all, setAll] = useState<boolean>(false);\n  const [s3, setS3] = useState<boolean>(true);\n  const [internal, setInternal] = useState<boolean>(false);\n  const [storage, setStorage] = useState<boolean>(false);\n  const [os, setOS] = useState<boolean>(false);\n  const [errors, setErrors] = useState<boolean>(false);\n\n  const [toggleFilter, setToggleFilter] = useState<boolean>(false);\n  const [logActive, setLogActive] = useState(false);\n  const [wsUrl, setWsUrl] = useState<string>(\"\");\n\n  useEffect(() => {\n    const url = new URL(window.location.toString());\n    const wsProt = wsProtocol(url.protocol);\n    const port = process.env.NODE_ENV === \"development\" ? \"9090\" : url.port;\n    const calls = all\n      ? \"all\"\n      : (() => {\n          const c = [];\n          if (s3) c.push(\"s3\");\n          if (internal) c.push(\"internal\");\n          if (storage) c.push(\"storage\");\n          if (os) c.push(\"os\");\n          return c.join(\",\");\n        })();\n\n    // check if we are using base path, if not this always is `/`\n    const baseLocation = new URL(document.baseURI).pathname;\n\n    const wsUrl = new URL(\n      `${wsProt}://${url.hostname}:${port}${baseLocation}ws/trace`,\n    );\n    wsUrl.searchParams.append(\"calls\", calls);\n    wsUrl.searchParams.append(\"threshold\", threshold.toString());\n    wsUrl.searchParams.append(\"onlyErrors\", errors ? \"yes\" : \"no\");\n    wsUrl.searchParams.append(\"statusCode\", statusCode);\n    wsUrl.searchParams.append(\"method\", method);\n    wsUrl.searchParams.append(\"funcname\", func);\n    wsUrl.searchParams.append(\"path\", path);\n    setWsUrl(wsUrl.href);\n  }, [\n    all,\n    s3,\n    internal,\n    storage,\n    os,\n    threshold,\n    errors,\n    statusCode,\n    method,\n    func,\n    path,\n  ]);\n\n  const { sendMessage, lastJsonMessage, readyState } =\n    useWebSocket<TraceMessage>(\n      wsUrl,\n      {\n        heartbeat: {\n          message: \"ok\",\n          interval: 10 * 1000, // send ok every 10 seconds\n          timeout: 365 * 24 * 60 * 60 * 1000, // disconnect after 365 days (workaround, because heartbeat gets no response)\n        },\n      },\n      logActive,\n    );\n\n  useEffect(() => {\n    if (readyState === ReadyState.CONNECTING) {\n      dispatch(traceResetMessages());\n    } else if (readyState === ReadyState.OPEN) {\n      dispatch(setTraceStarted(true));\n    } else if (readyState === ReadyState.CLOSED) {\n      dispatch(setTraceStarted(false));\n    }\n  }, [readyState, dispatch, sendMessage]);\n\n  useEffect(() => {\n    if (lastJsonMessage) {\n      lastJsonMessage.ptime = DateTime.fromISO(lastJsonMessage.time).toJSDate();\n      lastJsonMessage.key = Math.random();\n      dispatch(traceMessageReceived(lastJsonMessage));\n    }\n  }, [lastJsonMessage, dispatch]);\n\n  useEffect(() => {\n    dispatch(setHelpName(\"trace\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeaderWrapper label={\"Trace\"} actions={<HelpMenu />} />\n\n      <PageLayout>\n        <Box withBorders>\n          <Grid container>\n            <Grid\n              item\n              xs={12}\n              sx={{\n                display: \"flex\",\n                flexFlow: \"column\",\n\n                \"& .trace-Checkbox-label\": {\n                  fontSize: \"14px\",\n                  fontWeight: \"normal\",\n                },\n              }}\n            >\n              <Box\n                sx={{\n                  fontSize: \"16px\",\n                  fontWeight: 600,\n                  padding: \"20px 0px 20px 0\",\n                }}\n              >\n                Calls to Trace\n              </Box>\n              <Box\n                className={`${traceStarted ? \"inactive-state\" : \"\"}`}\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    flexFlow: \"row\",\n                    \"& .trace-checked-icon\": {\n                      border: \"1px solid red\",\n                    },\n                    [`@media (min-width: ${breakPoints.md}px)`]: {\n                      gap: 30,\n                    },\n                  }}\n                >\n                  <Checkbox\n                    checked={all}\n                    id={\"all_calls\"}\n                    name={\"all_calls\"}\n                    label={\"All\"}\n                    onChange={() => setAll(!all)}\n                    value={\"all\"}\n                    disabled={traceStarted}\n                  />\n                  <Checkbox\n                    checked={s3 || all}\n                    id={\"s3_calls\"}\n                    name={\"s3_calls\"}\n                    label={\"S3\"}\n                    onChange={() => setS3(!s3)}\n                    value={\"s3\"}\n                    disabled={all || traceStarted}\n                  />\n                  <Checkbox\n                    checked={internal || all}\n                    id={\"internal_calls\"}\n                    name={\"internal_calls\"}\n                    label={\"Internal\"}\n                    onChange={() => setInternal(!internal)}\n                    value={\"internal\"}\n                    disabled={all || traceStarted}\n                  />\n                  <Checkbox\n                    checked={storage || all}\n                    id={\"storage_calls\"}\n                    name={\"storage_calls\"}\n                    label={\"Storage\"}\n                    onChange={() => setStorage(!storage)}\n                    value={\"storage\"}\n                    disabled={all || traceStarted}\n                  />\n                  <Checkbox\n                    checked={os || all}\n                    id={\"os_calls\"}\n                    name={\"os_calls\"}\n                    label={\"OS\"}\n                    onChange={() => setOS(!os)}\n                    value={\"os\"}\n                    disabled={all || traceStarted}\n                  />\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    gap: \"15px\",\n                  }}\n                >\n                  <TooltipWrapper tooltip={\"More filter options\"}>\n                    <Button\n                      id={\"filter-toggle\"}\n                      onClick={() => setToggleFilter(!toggleFilter)}\n                      label={\"Filters\"}\n                      icon={<FilterIcon />}\n                      variant={\"regular\"}\n                      className={\"filters-toggle-button\"}\n                      style={{\n                        width: \"118px\",\n                        background: toggleFilter ? \"rgba(8, 28, 66, 0.04)\" : \"\",\n                      }}\n                    />\n                  </TooltipWrapper>\n\n                  {!traceStarted && (\n                    <Button\n                      id={\"start-trace\"}\n                      label={\"Start\"}\n                      data-test-id={\"trace-start-button\"}\n                      variant=\"callAction\"\n                      onClick={() => setLogActive(true)}\n                      style={{\n                        width: \"118px\",\n                      }}\n                    />\n                  )}\n                  {traceStarted && (\n                    <Button\n                      id={\"stop-trace\"}\n                      label={\"Stop Trace\"}\n                      data-test-id={\"trace-stop-button\"}\n                      variant=\"callAction\"\n                      onClick={() => setLogActive(false)}\n                      style={{\n                        width: \"118px\",\n                      }}\n                    />\n                  )}\n                </Box>\n              </Box>\n            </Grid>\n            {toggleFilter ? (\n              <Box\n                useBackground\n                className={`${traceStarted ? \"inactive-state\" : \"\"}`}\n                sx={{\n                  marginTop: \"25px\",\n                  display: \"flex\",\n                  flexFlow: \"column\",\n                  padding: \"30px\",\n                  width: \"100%\",\n\n                  \"& .orient-vertical\": {\n                    flexFlow: \"column\",\n                    \"& label\": {\n                      marginBottom: \"10px\",\n                      fontWeight: 600,\n                    },\n                    \"& .inputRebase\": {\n                      width: \"90%\",\n                    },\n                  },\n\n                  \"& .trace-Checkbox-label\": {\n                    fontSize: \"14px\",\n                    fontWeight: \"normal\",\n                  },\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                  }}\n                >\n                  <InputBox\n                    className=\"orient-vertical\"\n                    id=\"trace-status-code\"\n                    name=\"trace-status-code\"\n                    label=\"Status Code\"\n                    placeholder=\"e.g. 503\"\n                    value={statusCode}\n                    onChange={(e) => setStatusCode(e.target.value)}\n                    disabled={traceStarted}\n                  />\n\n                  <InputBox\n                    className=\"orient-vertical\"\n                    id=\"trace-function-name\"\n                    name=\"trace-function-name\"\n                    label=\"Function Name\"\n                    placeholder=\"e.g. FunctionName2055\"\n                    value={func}\n                    onChange={(e) => setFunc(e.target.value)}\n                    disabled={traceStarted}\n                  />\n\n                  <InputBox\n                    className=\"orient-vertical\"\n                    id=\"trace-method\"\n                    name=\"trace-method\"\n                    label=\"Method\"\n                    placeholder=\"e.g. Method 2056\"\n                    value={method}\n                    onChange={(e) => setMethod(e.target.value)}\n                    disabled={traceStarted}\n                  />\n                </Box>\n                <Box\n                  sx={{\n                    gap: \"30px\",\n                    display: \"grid\",\n                    gridTemplateColumns: \"2fr 1fr\",\n                    width: \"100%\",\n                    marginTop: \"33px\",\n                  }}\n                >\n                  <Box\n                    sx={{\n                      flex: 2,\n                      width: \"calc( 100% + 10px)\",\n                    }}\n                  >\n                    <InputBox\n                      className=\"orient-vertical\"\n                      id=\"trace-path\"\n                      name=\"trace-path\"\n                      label=\"Path\"\n                      placeholder=\"e.g. my-bucket/my-prefix/*\"\n                      value={path}\n                      onChange={(e) => setPath(e.target.value)}\n                      disabled={traceStarted}\n                    />\n                  </Box>\n                  <Box\n                    sx={{\n                      marginLeft: \"15px\",\n                    }}\n                  >\n                    <InputBox\n                      className=\"orient-vertical\"\n                      id=\"trace-fthreshold\"\n                      name=\"trace-fthreshold\"\n                      label=\"Response Threshold\"\n                      type=\"number\"\n                      placeholder=\"e.g. website.io.3249.114.12\"\n                      value={`${threshold}`}\n                      onChange={(e) => setThreshold(parseInt(e.target.value))}\n                      disabled={traceStarted}\n                    />\n                  </Box>\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"flex-start\",\n                    marginTop: \"40px\",\n                  }}\n                >\n                  <Checkbox\n                    checked={errors}\n                    id={\"only_errors\"}\n                    name={\"only_errors\"}\n                    label={\"Display only Errors\"}\n                    onChange={() => setErrors(!errors)}\n                    value={\"only_errors\"}\n                    disabled={traceStarted}\n                  />\n                </Box>\n              </Box>\n            ) : null}\n\n            <Grid item xs={12}>\n              <Box\n                sx={{\n                  fontSize: \"16px\",\n                  fontWeight: 600,\n                  marginBottom: \"30px\",\n                  marginTop: \"30px\",\n                }}\n              >\n                Trace Results\n              </Box>\n            </Grid>\n            <Grid item xs={12}>\n              <DataTable\n                columns={[\n                  {\n                    label: \"Time\",\n                    elementKey: \"ptime\",\n                    renderFunction: (time: Date) => {\n                      const timeParse = new Date(time);\n                      return timeFromDate(timeParse);\n                    },\n                    width: 100,\n                  },\n                  { label: \"Name\", elementKey: \"api\" },\n                  {\n                    label: \"Status\",\n                    elementKey: \"\",\n                    renderFunction: (fullElement: TraceMessage) =>\n                      `${fullElement.statusCode} ${fullElement.statusMsg}`,\n                    renderFullObject: true,\n                  },\n                  {\n                    label: \"Location\",\n                    elementKey: \"configuration_id\",\n                    renderFunction: (fullElement: TraceMessage) =>\n                      `${fullElement.host} ${fullElement.client}`,\n                    renderFullObject: true,\n                  },\n                  {\n                    label: \"Load Time\",\n                    elementKey: \"callStats.duration\",\n                    width: 150,\n                  },\n                  {\n                    label: \"Upload\",\n                    elementKey: \"callStats.rx\",\n                    renderFunction: niceBytes,\n                    width: 150,\n                  },\n                  {\n                    label: \"Download\",\n                    elementKey: \"callStats.tx\",\n                    renderFunction: niceBytes,\n                    width: 150,\n                  },\n                ]}\n                isLoading={false}\n                records={messages}\n                entityName=\"Traces\"\n                idField=\"api\"\n                customEmptyMessage={\n                  traceStarted\n                    ? \"No Traced elements received yet\"\n                    : \"Trace is not started yet\"\n                }\n                customPaperHeight={\"calc(100vh - 292px)\"}\n                autoScrollToBottom\n              />\n            </Grid>\n          </Grid>\n        </Box>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default Trace;\n","import { sharedWebSockets } from './globals';\nimport { DEFAULT_RECONNECT_LIMIT, DEFAULT_RECONNECT_INTERVAL_MS, ReadyState, isEventSourceSupported } from './constants';\nimport { getSubscribers } from './manage-subscribers';\nimport { MutableRefObject } from 'react';\nimport { HeartbeatOptions, Options, SendMessage, WebSocketLike } from './types';\nimport { setUpSocketIOPing } from './socket-io';\nimport { heartbeat } from './heartbeat';\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  heartbeatOptions?: boolean | HeartbeatOptions\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n\n      if (typeof subscriber?.lastMessageTime?.current === 'number') {\n        subscriber.lastMessageTime.current = Date.now();\n      }\n\n      if (\n        typeof subscriber.optionsRef.current.filter === 'function' &&\n        subscriber.optionsRef.current.filter(message) !== true\n      ) {\n        return;\n      }\n\n      if (\n        heartbeatOptions &&\n        typeof heartbeatOptions !== \"boolean\" &&\n        heartbeatOptions?.returnMessage === message.data\n      )\n        return;\n\n      subscriber.setLastMessage(message);\n    });\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  heartbeatOptions?: boolean | HeartbeatOptions\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    const subscribers = getSubscribers(url);\n    subscribers.forEach(subscriber => {\n      subscriber.reconnectCount.current = 0;\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n\n      subscriber.setReadyState(ReadyState.OPEN);\n\n      let onMessageCb: () => void;\n\n      if (heartbeatOptions && webSocketInstance instanceof WebSocket) {\n        subscriber.lastMessageTime.current = Date.now();\n      }\n    });\n    if (heartbeatOptions && webSocketInstance instanceof WebSocket) {\n      heartbeat(webSocketInstance, subscribers.map(subscriber => subscriber.lastMessageTime), typeof heartbeatOptions === 'boolean' ? undefined : heartbeatOptions,);\n    }\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n      getSubscribers(url).forEach(subscriber => {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n\n        subscriber.setReadyState(ReadyState.CLOSED);\n      });\n\n      delete sharedWebSockets[url];\n\n      getSubscribers(url).forEach(subscriber => {\n        if (\n          subscriber.optionsRef.current.shouldReconnect &&\n          subscriber.optionsRef.current.shouldReconnect(event)\n        ) {\n          const reconnectAttempts = subscriber.optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            const nextReconnectInterval = typeof subscriber.optionsRef.current.reconnectInterval === 'function' ?\n              subscriber.optionsRef.current.reconnectInterval(subscriber.reconnectCount.current) :\n              subscriber.optionsRef.current.reconnectInterval;\n\n            setTimeout(() => {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts as number);\n            console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n          }\n        }\n      });\n    };\n  }\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n      if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose({\n          ...error,\n          code: 1006,\n          reason: `An error occurred with the EventSource: ${error}`,\n          wasClean: false,\n        });\n\n        subscriber.setReadyState(ReadyState.CLOSED);\n      }\n    });\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\n\nexport const attachSharedListeners = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  optionsRef: MutableRefObject<Options>,\n  sendMessage: SendMessage,\n) => {\n  let interval: number;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, url, optionsRef.current.heartbeat);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url, optionsRef.current.heartbeat);\n  bindErrorHandler(webSocketInstance, url);\n\n  return () => {\n    if (interval) clearInterval(interval);\n  };\n};\n","import { useMemo } from 'react'\nimport { useWebSocket } from './use-websocket'\nimport { DEFAULT_OPTIONS } from './constants'\nimport { Options, WebSocketHook } from './types';\n\nexport interface SocketIOMessageData<T = unknown> {\n  type: string,\n  payload: T | null,\n}\n\nconst emptyEvent: SocketIOMessageData<null> = {\n  type: 'empty',\n  payload: null,\n}\n\nconst getSocketData = <T = unknown>(event: WebSocketEventMap['message'] | null): SocketIOMessageData<T | null> => {\n  if (!event || !event.data) {\n    return emptyEvent\n  }\n\n  const match = event.data.match(/\\[.*]/)\n\n  if (!match) {\n    return emptyEvent\n  }\n\n  const data = JSON.parse(match)\n\n  if (!Array.isArray(data) || !data[1]) {\n    return emptyEvent\n  }\n\n  return {\n    type: data[0],\n    payload: data[1],\n  }\n}\n\nexport const useSocketIO = <T = unknown>(\n  url: string | (() => string | Promise<string>) | null,\n  options: Options = DEFAULT_OPTIONS,\n  connect: boolean = true,\n): WebSocketHook<SocketIOMessageData<T | null>, SocketIOMessageData<T | null>> => {\n  const optionsWithSocketIO = useMemo(() => ({\n    ...options,\n    fromSocketIO: true,\n  }), [])\n\n  const {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage,\n    readyState,\n    getWebSocket,\n  } = useWebSocket(\n\n    url,\n    optionsWithSocketIO,\n    connect,\n  );\n\n  const socketIOLastMessage = useMemo(() =>\n    getSocketData<T>(lastMessage), [lastMessage]);\n\n  return {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage: socketIOLastMessage,\n    lastJsonMessage: socketIOLastMessage,\n    readyState,\n    getWebSocket,\n  };\n}\n","import { useEffect, useRef } from 'react'\nimport { useWebSocket } from './use-websocket'\nimport { DEFAULT_EVENT_SOURCE_OPTIONS, EMPTY_EVENT_HANDLERS } from './constants'\nimport { EventSourceOptions, Options, EventSourceHook, EventSourceEventHandlers } from './types';\n\nexport const useEventSource = (\n  url: string | (() => string | Promise<string>) | null,\n  { withCredentials, events, ...options }: EventSourceOptions = DEFAULT_EVENT_SOURCE_OPTIONS,\n  connect: boolean = true,\n): EventSourceHook => {\n  const optionsWithEventSource: Options = {\n      ...options,\n      eventSourceOptions: {\n        withCredentials,\n      }\n  };\n  const eventsRef = useRef<EventSourceEventHandlers>(EMPTY_EVENT_HANDLERS);\n  if (events) {\n    eventsRef.current = events\n  }\n\n  const {\n    lastMessage,\n    readyState,\n    getWebSocket,\n  } = useWebSocket(\n    url,\n    optionsWithEventSource,\n    connect,\n  );\n\n  useEffect(() => {\n    if (lastMessage?.type) {\n        Object.entries(eventsRef.current).forEach(([type, handler]) => {\n            if (type === lastMessage.type) {\n                handler(lastMessage);\n            }\n        });\n    }\n  }, [lastMessage]);\n\n  return {\n    lastEvent: lastMessage,\n    readyState,\n    getEventSource: getWebSocket,\n  };\n}\n","import { SOCKET_IO_PING_INTERVAL, SOCKET_IO_PATH, SOCKET_IO_PING_CODE } from './constants';\nimport { QueryParams, SendMessage } from './types';\n\nexport const parseSocketIOUrl = (url: string) => {\n  if (url) {\n    const isSecure = /^https|wss/.test(url);\n    const strippedProtocol = url.replace(/^(https?|wss?)(:\\/\\/)?/, '');\n    const removedFinalBackSlack = strippedProtocol.replace(/\\/$/, '');\n    const protocol = isSecure ? 'wss' : 'ws';\n\n    return `${protocol}://${removedFinalBackSlack}${SOCKET_IO_PATH}`;\n  } else if (url === '') {\n    const isSecure = /^https/.test(window.location.protocol);\n    const protocol = isSecure ? 'wss' : 'ws';\n    const port = window.location.port ? `:${window.location.port}` : '';\n\n    return `${protocol}://${window.location.hostname}${port}${SOCKET_IO_PATH}`;\n  }\n\n  return url;\n};\n\nexport const appendQueryParams = (url: string, params: QueryParams = {}): string => {\n  const hasParamsRegex = /\\?([\\w]+=[\\w]+)/;\n  const alreadyHasParams = hasParamsRegex.test(url);\n\n  const stringified = `${Object.entries(params).reduce((next, [key, value]) => {\n    return next + `${key}=${value}&`;\n  }, '').slice(0, -1)}`;\n\n  return `${url}${alreadyHasParams ? '&' : '?'}${stringified}`;\n};\n\nexport const setUpSocketIOPing = (sendMessage: SendMessage, interval = SOCKET_IO_PING_INTERVAL) => {\n  const ping = () => sendMessage(SOCKET_IO_PING_CODE);\n\n  return window.setInterval(ping, interval);\n};\n","import { WebSocketLike } from \"./types\";\n\nexport interface SharedWebSockets {\n  [url: string]: WebSocketLike;\n}\n\nexport const sharedWebSockets: SharedWebSockets = {};\n\nexport const resetWebSockets = (url?: string): void => {\n  if (url && sharedWebSockets.hasOwnProperty(url)) {\n    delete sharedWebSockets[url];\n  } else {\n    for (let url in sharedWebSockets){\n      if (sharedWebSockets.hasOwnProperty(url)){\n        delete sharedWebSockets[url];\n      }\n    }\n  }\n}\n","import { MutableRefObject } from 'react';\nimport { setUpSocketIOPing } from './socket-io';\nimport { heartbeat } from './heartbeat';\nimport {\n  DEFAULT_RECONNECT_LIMIT,\n  DEFAULT_RECONNECT_INTERVAL_MS,\n  ReadyState,\n  isEventSourceSupported,\n} from './constants';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { assertIsWebSocket } from './util';\n\nexport interface Setters {\n  setLastMessage: (message: WebSocketEventMap['message']) => void;\n  setReadyState: (readyState: ReadyState) => void;\n}\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: Setters['setLastMessage'],\n  lastMessageTime: MutableRefObject<number>,\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n\n    if (typeof lastMessageTime?.current === 'number') {\n      lastMessageTime.current = Date.now();\n    }\n\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n    if (\n      optionsRef.current.heartbeat &&\n      typeof optionsRef.current.heartbeat !== \"boolean\" &&\n      optionsRef.current.heartbeat?.returnMessage === message.data\n    ) {\n      return;\n    }\n\n    setLastMessage(message);\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnectCount: MutableRefObject<number>,\n  lastMessageTime: MutableRefObject<number>,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(ReadyState.OPEN);\n    //start heart beat here\n    if (optionsRef.current.heartbeat && webSocketInstance instanceof WebSocket) {\n      const heartbeatOptions =\n        typeof optionsRef.current.heartbeat === \"boolean\"\n          ? undefined\n          : optionsRef.current.heartbeat;\n      lastMessageTime.current = Date.now();\n      heartbeat(webSocketInstance, lastMessageTime, heartbeatOptions);\n    }\n\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return () => { };\n  }\n  assertIsWebSocket(webSocketInstance, optionsRef.current.skipAssert);\n  let reconnectTimeout: number;\n\n  webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(ReadyState.CLOSED);\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      const reconnectAttempts = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n      if (reconnectCount.current < reconnectAttempts) {\n        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\n          optionsRef.current.reconnectInterval(reconnectCount.current) :\n          optionsRef.current.reconnectInterval;\n\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  let reconnectTimeout: number;\n\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    optionsRef.current.onError && optionsRef.current.onError(error);\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose({\n        ...error,\n        code: 1006,\n        reason: `An error occurred with the EventSource: ${error}`,\n        wasClean: false,\n      });\n\n      setReadyState(ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n\n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < (optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT)) {\n        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\n          optionsRef.current.reconnectInterval(reconnectCount.current) :\n          optionsRef.current.reconnectInterval;\n\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts as number);\n        console.warn(`Max reconnect attempts of ${optionsRef.current.reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nexport const attachListeners = (\n  webSocketInstance: WebSocketLike,\n  setters: Setters,\n  optionsRef: MutableRefObject<Options>,\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n  lastMessageTime: MutableRefObject<number>,\n  sendMessage: SendMessage\n): (() => void) => {\n  const { setLastMessage, setReadyState } = setters;\n\n  let interval: number;\n  let cancelReconnectOnClose: () => void;\n  let cancelReconnectOnError: () => void;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(\n    webSocketInstance,\n    optionsRef,\n    setLastMessage,\n    lastMessageTime\n  );\n\n  bindOpenHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnectCount,\n    lastMessageTime,\n  );\n\n  cancelReconnectOnClose = bindCloseHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  cancelReconnectOnError = bindErrorHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  return () => {\n    setReadyState(ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\n","import { MutableRefObject } from 'react';\nimport { sharedWebSockets } from './globals';\nimport { Options, SendMessage, Subscriber, WebSocketLike } from './types';\nimport { isEventSourceSupported, ReadyState, isReactNative } from './constants';\nimport { attachListeners } from './attach-listener';\nimport { attachSharedListeners } from './attach-shared-listeners';\nimport { addSubscriber, removeSubscriber, hasSubscribers } from './manage-subscribers';\n\n//TODO ensure that all onClose callbacks are called\n\nconst cleanSubscribers = (\n  url: string,\n  subscriber: Subscriber,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: (readyState: ReadyState) => void,\n  clearSocketIoPingInterval: (() => void) | null,\n) => {\n  return () => {\n    removeSubscriber(url, subscriber);\n    if (!hasSubscribers(url)) {\n      try {\n        const socketLike = sharedWebSockets[url];\n        if (socketLike instanceof WebSocket) {\n          socketLike.onclose = (event: WebSocketEventMap['close']) => {\n            if (optionsRef.current.onClose) {\n              optionsRef.current.onClose(event);\n            }\n            setReadyState(ReadyState.CLOSED);\n          };\n        }\n        socketLike.close();\n      } catch (e) {\n\n      }\n      if (clearSocketIoPingInterval) clearSocketIoPingInterval();\n\n      delete sharedWebSockets[url];\n    }\n  }\n};\n\nexport const createOrJoinSocket = (\n  webSocketRef: MutableRefObject<WebSocketLike | null>,\n  url: string,\n  setReadyState: (readyState: ReadyState) => void,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: (message: WebSocketEventMap['message']) => void,\n  startRef: MutableRefObject<() => void>,\n  reconnectCount: MutableRefObject<number>,\n  lastMessageTime: MutableRefObject<number>,\n  sendMessage: SendMessage,\n): (() => void) => {\n  if (!isEventSourceSupported && optionsRef.current.eventSourceOptions) {\n    if (isReactNative) {\n      throw new Error('EventSource is not supported in ReactNative');\n    } else {\n      throw new Error('EventSource is not supported');\n    }\n  }\n\n  if (optionsRef.current.share) {\n    let clearSocketIoPingInterval: ((() => void) | null) = null;\n    if (sharedWebSockets[url] === undefined) {\n      sharedWebSockets[url] = optionsRef.current.eventSourceOptions ?\n        new EventSource(url, optionsRef.current.eventSourceOptions) :\n        new WebSocket(url, optionsRef.current.protocols);\n      webSocketRef.current = sharedWebSockets[url];\n      setReadyState(ReadyState.CONNECTING);\n      clearSocketIoPingInterval = attachSharedListeners(\n        sharedWebSockets[url],\n        url,\n        optionsRef,\n        sendMessage,\n      );\n    } else {\n      webSocketRef.current = sharedWebSockets[url];\n      setReadyState(sharedWebSockets[url].readyState);\n    }\n\n    const subscriber: Subscriber = {\n      setLastMessage,\n      setReadyState,\n      optionsRef,\n      reconnectCount,\n      lastMessageTime,\n      reconnect: startRef,\n    };\n\n    addSubscriber(url, subscriber);\n\n    return cleanSubscribers(\n      url,\n      subscriber,\n      optionsRef,\n      setReadyState,\n      clearSocketIoPingInterval,\n    );\n  } else {\n    webSocketRef.current = optionsRef.current.eventSourceOptions ?\n      new EventSource(url, optionsRef.current.eventSourceOptions) :\n      new WebSocket(url, optionsRef.current.protocols);\n    setReadyState(ReadyState.CONNECTING);\n    if (!webSocketRef.current) {\n      throw new Error('WebSocket failed to be created');\n    }\n\n    return attachListeners(\n      webSocketRef.current,\n      {\n        setLastMessage,\n        setReadyState\n      },\n      optionsRef,\n      startRef.current,\n      reconnectCount,\n      lastMessageTime,\n      sendMessage,\n    );\n  }\n};\n","import { MutableRefObject } from 'react';\n\ntype IfEquals<X, Y, A=X, B=never> =\n  (<T>() => T extends X ? 1 : 2) extends\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\n\ntype WritableKeys<T> = {\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\n}[keyof T];\n\nexport const websocketWrapper = (\n  webSocket: WebSocket,\n  start: MutableRefObject<() => void>,\n): WebSocket => {\n\n  return new Proxy<WebSocket>(webSocket, {\n    get: (obj, key: keyof WebSocket) => {\n      const val = obj[key];\n      if ((key as any) === 'reconnect') return start;\n      if (typeof val === 'function') {\n        console.error('Calling methods directly on the websocket is not supported at this moment. You must use the methods returned by useWebSocket.');\n        \n        //Prevent error thrown by invoking a non-function\n        return () => {};\n      } else {\n        return val;\n      }\n    },\n    set: <T extends WritableKeys<WebSocket>>(obj: WebSocket, key: T, val: WebSocket[T]) => {\n      if (/^on/.test(key)) {\n        console.warn('The websocket\\'s event handlers should be defined through the options object passed into useWebSocket.')\n        return false;\n      } else {\n        obj[key] = val;\n        return true;\n      }\n    },\n  });\n};\n\nexport default websocketWrapper;\n","import { MutableRefObject } from \"react\";\nimport { DEFAULT_HEARTBEAT } from \"./constants\";\nimport { HeartbeatOptions } from \"./types\";\n\nfunction getLastMessageTime(lastMessageTime: MutableRefObject<number> | MutableRefObject<number>[]): number {\n  if (Array.isArray(lastMessageTime)) {\n    return lastMessageTime.reduce((p, c) => { return (p.current > c.current) ? p : c; }).current;\n  }\n  return lastMessageTime.current\n}\n\nexport function heartbeat(ws: WebSocket, lastMessageTime: MutableRefObject<number> | MutableRefObject<number>[], options?: HeartbeatOptions): () => void {\n  const {\n    interval = DEFAULT_HEARTBEAT.interval,\n    timeout = DEFAULT_HEARTBEAT.timeout,\n    message = DEFAULT_HEARTBEAT.message,\n  } = options || {};\n\n  // how often check interval between ping messages\n  // minimum is 100ms\n  // maximum is ${interval / 10}ms\n  const intervalCheck = Math.max(100, interval / 10);\n\n  let lastPingSentAt = Date.now();\n\n  const heartbeatInterval = setInterval(() => {\n    const timeNow = Date.now();\n    const lastMessageReceivedAt = getLastMessageTime(lastMessageTime);\n    if (lastMessageReceivedAt + timeout <= timeNow) {\n      console.warn(`Heartbeat timed out, closing connection, last message received ${timeNow - lastMessageReceivedAt}ms ago, last ping sent ${timeNow - lastPingSentAt}ms ago`);\n      ws.close();\n    } else {\n      if (lastMessageReceivedAt + interval <= timeNow && lastPingSentAt + interval <= timeNow) {\n        try {\n          if (typeof message === 'function') {\n            ws.send(message());\n          } else {\n            ws.send(message);\n          }\n          lastPingSentAt = timeNow;\n        } catch (err: unknown) {\n          console.error(`Heartbeat failed, closing connection`, err instanceof Error ? err.message : err);\n          ws.close();\n        }\n\n      }\n    }\n  }, intervalCheck);\n\n  ws.addEventListener(\"close\", () => {\n    clearInterval(heartbeatInterval);\n  });\n\n  return () => { };\n}\n"],"names":["subscribers","EMPTY_LIST","exports","url","hasSubscribers","Array","from","_a","size","subscriber","Set","add","delete","hasOwnProperty","url_1","react_1","require","react_dom_1","constants_1","create_or_join_1","get_url_1","proxy_1","__importDefault","util_1","options","connect","DEFAULT_OPTIONS","useState","lastMessage","setLastMessage","_b","readyState","setReadyState","lastJsonMessage","useMemo","disableJson","JSON","parse","data","e","UNPARSABLE_JSON_OBJECT","convertedUrl","useRef","webSocketRef","startRef","reconnectCount","lastMessageTime","Date","now","messageQueue","webSocketProxy","optionsCache","current","readyStateFromUrl","undefined","ReadyState","CONNECTING","UNINSTANTIATED","stringifiedQueryParams","queryParams","stringify","sendMessage","useCallback","message","keep","isEventSourceSupported","EventSource","console","warn","OPEN","assertIsWebSocket","skipAssert","send","push","sendJsonMessage","getWebSocket","share","default","useEffect","removeListeners_1","expectClose_1","createOrJoin_1","start_1","__awaiter","getUrl","sent","error","flushSync","prev","__assign","ABORTED","CLOSED","protectedSetLastMessage","protectedSetReadyState","state","createOrJoinSocket","splice","forEach","use_websocket_1","Object","enumerable","get","useWebSocket","use_socket_io_1","use_event_source_1","withCredentials","events","EMPTY_EVENT_HANDLERS","timeout","interval","navigator","product","isReactNative","globalThis","eventSourceSupported","socket_io_1","optionsRef_1","optionsRef","retriedAttempts","_d","retryOnError","reconnectLimit","reconnectAttempts","DEFAULT_RECONNECT_LIMIT","nextReconnectInterval","reconnectInterval","duration","DEFAULT_RECONNECT_INTERVAL_MS","Promise","resolve","window","setTimeout","_c","onReconnectStop","call","parsedUrl","fromSocketIO","parseSocketIOUrl","appendQueryParams","webSocketInstance","skip","WebSocket","Error","manage_subscribers_1","resetSubscribers","globals_1","resetWebSockets","Trace","dispatch","useAppDispatch","messages","useSelector","trace","traceStarted","statusCode","setStatusCode","method","setMethod","func","setFunc","path","setPath","threshold","setThreshold","all","setAll","s3","setS3","internal","setInternal","storage","setStorage","os","setOS","errors","setErrors","toggleFilter","setToggleFilter","logActive","setLogActive","wsUrl","setWsUrl","URL","location","toString","wsProt","wsProtocol","protocol","port","calls","c","join","baseLocation","document","baseURI","pathname","hostname","searchParams","append","href","heartbeat","traceResetMessages","setTraceStarted","ptime","DateTime","fromISO","time","toJSDate","key","Math","random","traceMessageReceived","setHelpName","_jsxs","Fragment","children","_jsx","PageHeaderWrapper","label","actions","HelpMenu","PageLayout","Box","withBorders","Grid","container","item","xs","sx","display","flexFlow","fontSize","fontWeight","padding","className","alignItems","justifyContent","border","breakPoints","md","gap","Checkbox","checked","id","name","onChange","value","disabled","TooltipWrapper","tooltip","Button","onClick","icon","FilterIcon","variant","style","width","background","useBackground","marginTop","marginBottom","InputBox","placeholder","target","gridTemplateColumns","flex","marginLeft","type","parseInt","DataTable","columns","elementKey","renderFunction","timeParse","timeFromDate","fullElement","statusMsg","renderFullObject","host","client","niceBytes","isLoading","records","entityName","idField","customEmptyMessage","customPaperHeight","autoScrollToBottom","heartbeat_1","setUpSocketIOPing","heartbeatOptions","onmessage","getSubscribers","onMessage","filter","returnMessage","bindMessageHandler","onclose","event","onClose","sharedWebSockets","shouldReconnect","reconnect","concat","bindCloseHandler","onopen","onOpen","map","bindOpenHandler","onerror","onError","code","reason","wasClean","close","bindErrorHandler","clearInterval","emptyEvent","payload","optionsWithSocketIO","socketIOLastMessage","match","isArray","getSocketData","DEFAULT_EVENT_SOURCE_OPTIONS","__rest","optionsWithEventSource","eventSourceOptions","eventsRef","entries","handler","lastEvent","getEventSource","isSecure","test","removedFinalBackSlack","replace","SOCKET_IO_PATH","params","alreadyHasParams","stringified","reduce","next","slice","SOCKET_IO_PING_INTERVAL","setInterval","SOCKET_IO_PING_CODE","setters","cancelReconnectOnClose","cancelReconnectOnError","reconnectTimeout","clearTimeout","CLOSING","attach_listener_1","attach_shared_listeners_1","clearSocketIoPingInterval","protocols","attachSharedListeners","addSubscriber","removeSubscriber","socketLike","cleanSubscribers","attachListeners","webSocket","start","Proxy","obj","val","set","websocketWrapper","ws","DEFAULT_HEARTBEAT","intervalCheck","max","lastPingSentAt","heartbeatInterval","timeNow","lastMessageReceivedAt","p","getLastMessageTime","err","addEventListener"],"sourceRoot":""}
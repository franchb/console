{"version":3,"file":"static/js/9537.8776fbd3.chunk.js","mappings":"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","sources":["screens/Console/Support/RegisterCluster.tsx","screens/Console/HealthInfo/types.ts","screens/Console/Common/TestWrapper/TestWrapper.tsx","screens/Console/HealthInfo/HealthInfo.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Box, breakPoints, Button, Grid, HelpBox, WarnIcon } from \"mds\";\n\ninterface IRegisterCluster {\n  compactMode?: boolean;\n}\n\nconst RegisterCluster = ({ compactMode = false }: IRegisterCluster) => {\n  const navigate = useNavigate();\n\n  const redirectButton = (\n    <Button\n      id={\"go-to-register\"}\n      type=\"submit\"\n      variant=\"callAction\"\n      color=\"primary\"\n      onClick={() => navigate(\"/support/register\")}\n    >\n      Register your Cluster\n    </Button>\n  );\n\n  const registerMessage =\n    \"Please use your MinIO Subscription Network login credentials to register this cluster and enable this feature.\";\n\n  if (compactMode) {\n    return (\n      <Fragment>\n        <Grid\n          sx={{\n            \"& div.leftItems\": {\n              marginBottom: 0,\n            },\n          }}\n        >\n          <HelpBox\n            title={\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  flexGrow: 1,\n                }}\n              >\n                <span>{registerMessage}</span> {redirectButton}\n              </div>\n            }\n            iconComponent={<WarnIcon />}\n            help={null}\n          />\n        </Grid>\n        <br />\n      </Fragment>\n    );\n  }\n\n  return (\n    <Box\n      sx={{\n        padding: \"25px\",\n        border: \"1px solid #eaeaea\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flexFlow: \"row\",\n        marginBottom: \"15px\",\n        [`@media (max-width: ${breakPoints.sm}px)`]: {\n          flexFlow: \"column\",\n        },\n      }}\n    >\n      <Grid container>\n        <Grid item xs={12}>\n          <Box\n            sx={{\n              marginRight: \"8px\",\n              fontSize: \"16px\",\n              fontWeight: 600,\n              display: \"flex\",\n              alignItems: \"center\",\n\n              \"& .min-icon\": {\n                width: \"83px\",\n                height: \"14px\",\n                marginLeft: \"5px\",\n                marginRight: \"5px\",\n              },\n            }}\n          >\n            Register your cluster\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <Box\n            sx={{\n              display: \"flex\",\n              flexFlow: \"row\",\n              [`@media (max-width: ${breakPoints.sm}px)`]: {\n                flexFlow: \"column\",\n              },\n            }}\n          >\n            <Box\n              sx={{\n                display: \"flex\",\n                flexFlow: \"column\",\n                flex: \"2\",\n              }}\n            >\n              <Box\n                sx={{\n                  fontSize: \"16px\",\n                  display: \"flex\",\n                  flexFlow: \"column\",\n                  marginTop: \"15px\",\n                  marginBottom: \"15px\",\n                }}\n              >\n                {registerMessage}\n              </Box>\n              <Box\n                sx={{\n                  flex: \"1\",\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"flex-end\",\n                  }}\n                >\n                  {redirectButton}\n                </Box>\n              </Box>\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default RegisterCluster;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const DiagStatError = \"error\";\nexport const DiagStatSuccess = \"success\";\nexport const DiagStatInProgress = \"inProgress\";\n\nexport interface HealthInfoMessage {\n  timestamp: string;\n  error: string;\n  perf: perfInfo;\n  minio: minioHealthInfo;\n  sys: sysHealthInfo;\n}\n\nexport interface ReportMessage {\n  encoded: string;\n  serverHealthInfo: HealthInfoMessage;\n  subnetResponse: string;\n}\n\ninterface perfInfo {\n  drives: serverDrivesInfo[];\n  net: serverNetHealthInfo[];\n  net_parallel: serverNetHealthInfo;\n  error: string;\n}\n\ninterface serverDrivesInfo {\n  addr: string;\n  serial: drivePerfInfo[];\n  parallel: drivePerfInfo[];\n  error: string;\n}\n\ninterface drivePerfInfo {\n  endpoint: string;\n  latency: diskLatency;\n  throughput: diskThroughput;\n  error: string;\n}\n\ninterface diskLatency {\n  avg_secs: number;\n  percentile50_secs: number;\n  percentile90_secs: number;\n  percentile99_secs: number;\n  min_secs: number;\n  max_secs: number;\n}\n\ninterface diskThroughput {\n  avg_bytes_per_sec: number;\n  percentile50_bytes_per_sec: number;\n  percentile90_bytes_per_sec: number;\n  percentile99_bytes_per_sec: number;\n  min_bytes_per_sec: number;\n  max_bytes_per_sec: number;\n}\n\ninterface serverNetHealthInfo {\n  addr: string;\n  net: netPerfInfo[];\n  error: string;\n}\n\ninterface netPerfInfo {\n  remote: string;\n  latency: netLatency;\n  throughput: netThroughput;\n  error: string;\n}\n\ninterface netLatency {\n  avg_secs: number;\n  percentile50_secs: number;\n  percentile90_secs: number;\n  percentile99_secs: number;\n  min_secs: number;\n  max_secs: number;\n}\n\ninterface netThroughput {\n  avg_bytes_per_sec: number;\n  percentile50_bytes_per_sec: number;\n  percentile90_bytes_per_sec: number;\n  percentile99_bytes_per_sec: number;\n  min_bytes_per_sec: number;\n  max_bytes_per_sec: number;\n}\n\ninterface minioHealthInfo {\n  info: infoMessage;\n  config: any;\n  error: string;\n}\n\ninterface infoMessage {\n  mode: string;\n  domain: string[];\n  region: string;\n  sqsARN: string[];\n  deploymentID: string;\n  buckets: buckets;\n  objects: objects;\n  usage: usage;\n  services: services;\n  backend: any;\n  servers: serverProperties[];\n}\n\ninterface buckets {\n  count: number;\n}\n\ninterface objects {\n  count: number;\n}\n\ninterface usage {\n  size: number;\n}\n\ninterface services {\n  vault: vault;\n  ldap: ldap;\n  logger: Map<string, status[]>[];\n  audit: Map<string, status[]>[];\n  notifications: Map<string, Map<string, status[]>[]>;\n}\n\ninterface vault {\n  status: string;\n  encrypt: string;\n  decrypt: string;\n}\n\ninterface ldap {\n  status: string;\n}\n\ninterface status {\n  status: string;\n}\n\ninterface serverProperties {\n  state: string;\n  endpoint: string;\n  uptime: number;\n  version: string;\n  commitID: string;\n  network: Map<string, string>;\n  drives: disk[];\n}\n\ninterface disk {\n  endpoint: string;\n  rootDisk: boolean;\n  path: string;\n  healing: boolean;\n  state: string;\n  uuid: string;\n  model: string;\n  totalspace: number;\n  usedspace: number;\n  availspace: number;\n  readthroughput: number;\n  writethroughput: number;\n  readlatency: number;\n  writelatency: number;\n  utilization: number;\n}\n\ninterface sysHealthInfo {\n  cpus: serverCpuInfo[];\n  drives: serverDiskHwInfo[];\n  osinfos: serverOsInfo[];\n  meminfos: serverMemInfo[];\n  procinfos: serverProcInfo[];\n  error: string;\n}\n\ninterface serverCpuInfo {\n  addr: string;\n  cpu: cpuInfoStat[];\n  time: cpuTimeStat[];\n  error: string;\n}\n\ninterface cpuInfoStat {\n  cpu: number;\n  vendorId: string;\n  family: string;\n  model: string;\n  stepping: number;\n  physicalId: string;\n  coreId: string;\n  cores: number;\n  modelName: string;\n  mhz: number;\n  cacheSize: number;\n  flags: string[];\n  microcode: string;\n}\n\ninterface cpuTimeStat {\n  cpu: string;\n  user: number;\n  system: number;\n  idle: number;\n  nice: number;\n  iowait: number;\n  irq: number;\n  softirq: number;\n  steal: number;\n  guest: number;\n  guestNice: number;\n}\n\ninterface serverDiskHwInfo {\n  addr: string;\n  usages: diskUsageStat[];\n  partitions: partitionStat[];\n  counters: Map<string, diskIOCountersStat>;\n  error: string;\n}\n\ninterface diskUsageStat {\n  path: string;\n  fstype: string;\n  total: number;\n  free: number;\n  used: number;\n  usedPercent: number;\n  inodesTotal: number;\n  inodesUsed: number;\n  inodesFree: number;\n  inodesUsedPercent: number;\n}\n\ninterface partitionStat {\n  device: string;\n  mountpoint: string;\n  fstype: string;\n  opts: string;\n  smartInfo: smartInfo;\n}\n\ninterface smartInfo {\n  device: string;\n  scsi: scsiInfo;\n  nvme: nvmeInfo;\n  ata: ataInfo;\n  error: string;\n}\n\ninterface scsiInfo {\n  scsiCapacityBytes: number;\n  scsiModeSenseBuf: string;\n  scsirespLen: number;\n  scsiBdLen: number;\n  scsiOffset: number;\n  sciRpm: number;\n}\n\ninterface nvmeInfo {\n  serialNum: string;\n  vendorId: string;\n  firmwareVersion: string;\n  modelNum: string;\n  spareAvailable: string;\n  spareThreshold: string;\n  temperature: string;\n  criticalWarning: string;\n  maxDataTransferPages: number;\n  controllerBusyTime: number;\n  powerOnHours: number;\n  powerCycles: number;\n  unsafeShutdowns: number;\n  mediaAndDataIntgerityErrors: number;\n  dataUnitsReadBytes: number;\n  dataUnitsWrittenBytes: number;\n  hostReadCommands: number;\n  hostWriteCommands: number;\n}\n\ninterface ataInfo {\n  scsiLuWWNDeviceID: string;\n  serialNum: string;\n  modelNum: string;\n  firmwareRevision: string;\n  RotationRate: string;\n  MajorVersion: string;\n  MinorVersion: string;\n  smartSupportAvailable: boolean;\n  smartSupportEnabled: boolean;\n  smartErrorLog: string;\n  transport: string;\n}\n\ninterface diskIOCountersStat {\n  readCount: number;\n  mergedReadCount: number;\n  DriteCount: number;\n  mergedWriteCount: number;\n  readBytes: number;\n  writeBytes: number;\n  readTime: number;\n  writeTime: number;\n  iopsInProgress: number;\n  ioTime: number;\n  weightedIO: number;\n  name: string;\n  serialNumber: string;\n  label: string;\n}\n\ninterface serverOsInfo {\n  addr: string;\n  info: infoStat;\n  sensors: temperatureStat[];\n  users: userStat[];\n  error: string;\n}\n\ninterface infoStat {\n  hostname: string;\n  uptime: number;\n  bootTime: number;\n  procs: number;\n  os: string;\n  platform: string;\n  platformFamily: string;\n  platformVersion: string;\n  kernelVersion: string;\n  kernelArch: string;\n  virtualizationSystem: string;\n  virtualizationRole: string;\n  hostid: string;\n}\n\ninterface temperatureStat {\n  sensorKey: string;\n  sensorTemperature: number;\n}\n\ninterface userStat {\n  user: string;\n  terminal: string;\n  host: string;\n  started: number;\n}\n\ninterface serverMemInfo {\n  addr: string;\n  swap: swapMemoryStat;\n  virtualmem: virtualMemoryStat;\n  error: string;\n}\n\ninterface swapMemoryStat {\n  total: number;\n  used: number;\n  free: number;\n  usedPercent: number;\n  sin: number;\n  sout: number;\n  pgin: number;\n  pgout: number;\n  pgfault: number;\n  pgmajfault: number;\n}\n\ninterface virtualMemoryStat {\n  total: number;\n  available: number;\n  used: number;\n  usedPercent: number;\n  free: number;\n  active: number;\n  inactive: number;\n  wired: number;\n  laundry: number;\n  buffers: number;\n  cached: number;\n  writeback: number;\n  dirty: number;\n  writebacktmp: number;\n  shared: number;\n  slab: number;\n  sreclaimable: number;\n  sunreclaim: number;\n  pagetables: number;\n  swapcached: number;\n  commitlimit: number;\n  committedas: number;\n  hightotal: number;\n  highfree: number;\n  lowtotal: number;\n  lowfree: number;\n  swaptotal: number;\n  swapfree: number;\n  mapped: number;\n  vmalloctotal: number;\n  vmallocused: number;\n  vmallocchunk: number;\n  hugepagestotal: number;\n  hugepagesfree: number;\n  hugepagesize: number;\n}\n\ninterface serverProcInfo {\n  addr: string;\n  processes: sysProcess[];\n  error: string;\n}\n\ninterface sysProcess {\n  pid: number;\n  background: boolean;\n  cpupercent: number;\n  children: number[];\n  cmd: string;\n  connections: nethwConnectionStat[];\n  createtime: number;\n  cwd: string;\n  exe: string;\n  gids: number[];\n  iocounters: processIOCountersStat;\n  isrunning: boolean;\n  meminfo: memoryInfoStat;\n  memmaps: any[];\n  mempercent: number;\n  name: string;\n  netiocounters: nethwIOCounterStat[];\n  nice: number;\n  numctxswitches: processNmCtxSwitchesStat;\n  numfds: number;\n  numthreads: number;\n  pagefaults: processPageFaultsStat;\n  parent: number;\n  ppid: number;\n  rlimit: processRLimitStat[];\n  status: string;\n  tgid: number;\n  cputimes: cpuTimeStat;\n  uids: number[];\n  username: string;\n}\n\ninterface nethwConnectionStat {\n  fd: number;\n  family: number;\n  type: number;\n  localaddr: netAddr;\n  remoteaddr: netAddr;\n  status: string;\n  uids: number[];\n  pid: number;\n}\n\ninterface netAddr {\n  ip: string;\n  port: number;\n}\n\ninterface processIOCountersStat {\n  readCount: number;\n  writeCount: number;\n  readBytes: number;\n  writeBytes: number;\n}\n\ninterface memoryInfoStat {\n  rss: number;\n  vms: number;\n  hwm: number;\n  data: number;\n  stack: number;\n  locked: number;\n  swap: number;\n}\n\ninterface nethwIOCounterStat {\n  name: string;\n  bytesSent: number;\n  bytesRecv: number;\n  packetsSent: number;\n  packetsRecv: number;\n  errin: number;\n  errout: number;\n  dropin: number;\n  dropout: number;\n  fifoin: number;\n  fifoout: number;\n}\n\ninterface processNmCtxSwitchesStat {\n  voluntary: number;\n  involuntary: number;\n}\n\ninterface processPageFaultsStat {\n  minorFaults: number;\n  majorFaults: number;\n  childMinorFaults: number;\n  childMajorFaults: number;\n}\n\ninterface processRLimitStat {\n  resource: number;\n  soft: number;\n  hard: number;\n  used: number;\n}\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { DrivesIcon, Loader, SectionTitle, VersionIcon, Grid } from \"mds\";\nimport { api } from \"api\";\nimport { ServerProperties } from \"api/consoleApi\";\n\ninterface ITestWrapper {\n  title: any;\n  children: any;\n}\n\nconst TestWrapper = ({ title, children }: ITestWrapper) => {\n  const [version, setVersion] = useState<string>(\"N/A\");\n  const [totalNodes, setTotalNodes] = useState<number>(0);\n  const [totalDrives, setTotalDrives] = useState<number>(0);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (loading) {\n      api.admin\n        .adminInfo({\n          defaultOnly: true,\n        })\n        .then((res) => {\n          const totalServers = res.data.servers?.length;\n          setTotalNodes(totalServers || 0);\n\n          if (res.data.servers && res.data.servers.length > 0) {\n            setVersion(res.data.servers[0].version || \"N/A\");\n\n            const totalServers = res.data.servers.reduce(\n              (prevTotal: number, currentElement: ServerProperties) => {\n                let c = currentElement.drives\n                  ? currentElement.drives.length\n                  : 0;\n                return prevTotal + c;\n              },\n              0,\n            );\n            setTotalDrives(totalServers);\n          }\n\n          setLoading(false);\n        })\n        .catch(() => {\n          setLoading(false);\n        });\n    }\n  }, [loading]);\n\n  return (\n    <Grid item xs={12}>\n      <SectionTitle separator>{title}</SectionTitle>\n      <Grid item xs={12}>\n        <Grid\n          item\n          xs={12}\n          sx={{\n            padding: 0,\n            marginBottom: 25,\n          }}\n        >\n          <Grid\n            container\n            sx={{\n              padding: 25,\n            }}\n          >\n            {!loading ? (\n              <Fragment>\n                <Grid\n                  item\n                  xs={12}\n                  md={4}\n                  sx={{\n                    fontSize: 18,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    \"& svg\": {\n                      marginRight: 10,\n                    },\n                  }}\n                >\n                  <DrivesIcon /> <strong>{totalNodes}</strong>\n                  &nbsp;nodes,&nbsp;\n                  <strong>{totalDrives}</strong>&nbsp; drives\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  md={4}\n                  sx={{\n                    fontSize: 12,\n                    justifyContent: \"center\",\n                    alignSelf: \"center\",\n                    alignItems: \"center\",\n                    display: \"flex\",\n                  }}\n                >\n                  <span\n                    style={{\n                      marginRight: 20,\n                    }}\n                  >\n                    <VersionIcon />\n                  </span>{\" \"}\n                  MinIO VERSION&nbsp;<strong>{version}</strong>\n                </Grid>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <Grid item xs={12} sx={{ textAlign: \"center\" }}>\n                  <Loader style={{ width: 25, height: 25 }} />\n                </Grid>\n              </Fragment>\n            )}\n          </Grid>\n        </Grid>\n        {children}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default TestWrapper;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Box, Button, Grid, HelpBox, InfoIcon, Loader, PageLayout } from \"mds\";\nimport {\n  DiagStatError,\n  DiagStatInProgress,\n  DiagStatSuccess,\n  HealthInfoMessage,\n  ReportMessage,\n} from \"./types\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport {\n  WSCloseAbnormalClosure,\n  WSCloseInternalServerErr,\n  WSClosePolicyViolation,\n  wsProtocol,\n} from \"../../../utils/wsUtils\";\nimport { setHelpName, setServerDiagStat } from \"../../../systemSlice\";\nimport {\n  healthInfoMessageReceived,\n  healthInfoResetMessage,\n} from \"./healthInfoSlice\";\nimport { registeredCluster } from \"../../../config\";\nimport TestWrapper from \"../Common/TestWrapper/TestWrapper\";\nimport RegisterCluster from \"../Support/RegisterCluster\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\n\nconst HealthInfo = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const message = useSelector((state: AppState) => state.healthInfo.message);\n\n  const serverDiagnosticStatus = useSelector(\n    (state: AppState) => state.system.serverDiagnosticStatus,\n  );\n  const [startDiagnostic, setStartDiagnostic] = useState(false);\n\n  const [downloadDisabled, setDownloadDisabled] = useState(true);\n  const [localMessage, setMessage] = useState<string>(\"\");\n  const [buttonStartText, setButtonStartText] = useState<string>(\n    \"Start Health Report\",\n  );\n  const [title, setTitle] = useState<string>(\"Health Report\");\n  const [diagFileContent, setDiagFileContent] = useState<string>(\"\");\n  const [subnetResponse, setSubnetResponse] = useState<string>(\"\");\n  const clusterRegistered = registeredCluster();\n\n  const download = () => {\n    let element = document.createElement(\"a\");\n    element.setAttribute(\n      \"href\",\n      `data:application/gzip;base64,${diagFileContent}`,\n    );\n    element.setAttribute(\"download\", \"diagnostic.json.gz\");\n\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  };\n\n  useEffect(() => {\n    if (serverDiagnosticStatus === DiagStatInProgress) {\n      setTitle(\"Health Report in progress...\");\n      setMessage(\n        \"Health Report started. Please do not refresh page during diagnosis.\",\n      );\n      return;\n    }\n\n    if (serverDiagnosticStatus === DiagStatSuccess) {\n      setTitle(\"Health Report complete\");\n      setMessage(\"Health Report file is ready to be downloaded.\");\n      setButtonStartText(\"Start Health Report\");\n      return;\n    }\n\n    if (serverDiagnosticStatus === DiagStatError) {\n      setTitle(\"Error\");\n      setMessage(\"An error occurred while getting the Health Report file.\");\n      setButtonStartText(\"Retry Health Report\");\n      return;\n    }\n  }, [serverDiagnosticStatus, startDiagnostic]);\n\n  useEffect(() => {\n    if (\n      serverDiagnosticStatus === DiagStatSuccess &&\n      message !== ({} as HealthInfoMessage)\n    ) {\n      // Allow download of diagnostics file only when\n      // it succeded fetching all the results and info is not empty.\n      setDownloadDisabled(false);\n    }\n    if (serverDiagnosticStatus === DiagStatInProgress) {\n      // Disable Start Health Report and Disable Download buttons\n      // if a Diagnosis is in progress.\n      setDownloadDisabled(true);\n    }\n    setStartDiagnostic(false);\n  }, [serverDiagnosticStatus, message]);\n\n  useEffect(() => {\n    if (startDiagnostic) {\n      dispatch(healthInfoResetMessage());\n      setDiagFileContent(\"\");\n      const url = new URL(window.location.toString());\n      const isDev = process.env.NODE_ENV === \"development\";\n      const port = isDev ? \"9090\" : url.port;\n\n      const wsProt = wsProtocol(url.protocol);\n\n      // check if we are using base path, if not this always is `/`\n      const baseLocation = new URL(document.baseURI);\n      const baseUrl = baseLocation.pathname;\n\n      const socket = new WebSocket(\n        `${wsProt}://${url.hostname}:${port}${baseUrl}ws/health-info?deadline=1h`,\n      );\n      let interval: any | null = null;\n      if (socket !== null) {\n        socket.onopen = () => {\n          console.log(\"WebSocket Client Connected\");\n          socket.send(\"ok\");\n          interval = setInterval(() => {\n            socket.send(\"ok\");\n          }, 10 * 1000);\n          setMessage(\n            \"Health Report started. Please do not refresh page during diagnosis.\",\n          );\n          dispatch(setServerDiagStat(DiagStatInProgress));\n        };\n        socket.onmessage = (message: MessageEvent) => {\n          let m: ReportMessage = JSON.parse(message.data.toString());\n          if (m.serverHealthInfo) {\n            dispatch(healthInfoMessageReceived(m.serverHealthInfo));\n          }\n          if (m.encoded !== \"\") {\n            setDiagFileContent(m.encoded);\n          }\n          if (m.subnetResponse) {\n            setSubnetResponse(m.subnetResponse);\n          }\n        };\n        socket.onerror = (error) => {\n          console.error(\"error closing websocket:\", error);\n          socket.close(1000);\n          clearInterval(interval);\n          dispatch(setServerDiagStat(DiagStatError));\n        };\n        socket.onclose = (event: CloseEvent) => {\n          clearInterval(interval);\n          if (\n            event.code === WSCloseInternalServerErr ||\n            event.code === WSClosePolicyViolation ||\n            event.code === WSCloseAbnormalClosure\n          ) {\n            // handle close with error\n            console.log(\"connection closed by server with code:\", event.code);\n            setMessage(\n              \"An error occurred while getting the Health Report file.\",\n            );\n            dispatch(setServerDiagStat(DiagStatError));\n          } else {\n            console.log(\"connection closed by server\");\n\n            setMessage(\"Health Report file is ready to be downloaded.\");\n            dispatch(setServerDiagStat(DiagStatSuccess));\n          }\n        };\n      }\n    } else {\n      // reset start status\n      setStartDiagnostic(false);\n    }\n  }, [startDiagnostic, dispatch]);\n\n  const startDiagnosticAction = () => {\n    if (!clusterRegistered) {\n      navigate(\"/support/register\");\n      return;\n    }\n    setStartDiagnostic(true);\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"health_info\"));\n  }, [dispatch]);\n\n  return (\n    <Fragment>\n      <PageHeaderWrapper label=\"Health\" actions={<HelpMenu />} />\n\n      <PageLayout>\n        {!clusterRegistered && <RegisterCluster compactMode />}\n        <Box withBorders>\n          <TestWrapper title={title}>\n            <Grid\n              container\n              sx={{\n                justifyContent: \"flex-start\",\n                gap: 20,\n              }}\n            >\n              <Grid\n                key=\"start-download\"\n                item\n                xs={12}\n                sx={{\n                  textAlign: \"center\",\n                  marginBottom: 25,\n                }}\n              >\n                <h2>{localMessage}</h2>\n                <Box\n                  sx={{\n                    textAlign: \"center\",\n                    marginBottom: 25,\n                  }}\n                >\n                  {\" \"}\n                  {subnetResponse !== \"\" &&\n                    !subnetResponse.toLowerCase().includes(\"error\") && (\n                      <Grid item xs={12}>\n                        <strong>\n                          Health report uploaded to SUBNET successfully!\n                        </strong>\n                        &nbsp;{\" \"}\n                        <strong>\n                          See the results on your{\" \"}\n                          <a href={subnetResponse}>SUBNET Dashboard</a>{\" \"}\n                        </strong>\n                      </Grid>\n                    )}\n                  {(subnetResponse === \"\" ||\n                    subnetResponse.toLowerCase().includes(\"error\")) &&\n                    serverDiagnosticStatus === DiagStatSuccess && (\n                      <Grid item xs={12}>\n                        <strong>\n                          Something went wrong uploading your Health report to\n                          SUBNET.\n                        </strong>\n                        &nbsp;{\" \"}\n                        <strong>\n                          Log into your{\" \"}\n                          <a href=\"https://subnet.min.io\">SUBNET Account</a> to\n                          manually upload your Health report.\n                        </strong>\n                      </Grid>\n                    )}\n                </Box>\n                {serverDiagnosticStatus === DiagStatInProgress ? (\n                  <Box\n                    sx={{\n                      paddingTop: 8,\n                      paddingLeft: 40,\n                    }}\n                  >\n                    <Loader style={{ width: 25, height: 25 }} />\n                  </Box>\n                ) : (\n                  <Fragment>\n                    <Box\n                      sx={{\n                        display: \"flex\",\n                        gap: 10,\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                      }}\n                    >\n                      <Box>\n                        {serverDiagnosticStatus !== DiagStatError &&\n                          !downloadDisabled && (\n                            <Button\n                              id={\"download\"}\n                              type=\"submit\"\n                              variant=\"callAction\"\n                              onClick={() => download()}\n                              disabled={downloadDisabled}\n                              label={\"Download\"}\n                            />\n                          )}\n                      </Box>\n                      <Box>\n                        <Button\n                          id=\"start-new-diagnostic\"\n                          type=\"submit\"\n                          variant={\n                            !clusterRegistered ? \"regular\" : \"callAction\"\n                          }\n                          disabled={startDiagnostic || !clusterRegistered}\n                          onClick={startDiagnosticAction}\n                          label={buttonStartText}\n                        />\n                      </Box>\n                    </Box>\n                  </Fragment>\n                )}\n              </Grid>\n            </Grid>\n          </TestWrapper>\n        </Box>\n        {!startDiagnostic && clusterRegistered && (\n          <Fragment>\n            <br />\n            <HelpBox\n              title={\n                \"Cluster Health Report will be uploaded to SUBNET, and is viewable from your SUBNET Diagnostics dashboard.\"\n              }\n              iconComponent={<InfoIcon />}\n              help={\n                \"If the Health report cannot be generated at this time, please wait a moment and try again.\"\n              }\n            />\n          </Fragment>\n        )}\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default HealthInfo;\n"],"names":["_ref","compactMode","navigate","useNavigate","redirectButton","_jsx","Button","id","type","variant","color","onClick","children","registerMessage","_jsxs","Fragment","Grid","sx","marginBottom","HelpBox","title","style","display","justifyContent","alignItems","flexGrow","iconComponent","WarnIcon","help","Box","padding","border","flexFlow","breakPoints","sm","container","item","xs","marginRight","fontSize","fontWeight","width","height","marginLeft","flex","marginTop","DiagStatError","DiagStatSuccess","DiagStatInProgress","version","setVersion","useState","totalNodes","setTotalNodes","totalDrives","setTotalDrives","loading","setLoading","useEffect","api","admin","adminInfo","defaultOnly","then","res","_res$data$servers","totalServers","data","servers","length","reduce","prevTotal","currentElement","drives","catch","SectionTitle","separator","textAlign","Loader","md","DrivesIcon","alignSelf","VersionIcon","HealthInfo","dispatch","useAppDispatch","message","useSelector","state","healthInfo","serverDiagnosticStatus","system","startDiagnostic","setStartDiagnostic","downloadDisabled","setDownloadDisabled","localMessage","setMessage","buttonStartText","setButtonStartText","setTitle","diagFileContent","setDiagFileContent","subnetResponse","setSubnetResponse","clusterRegistered","registeredCluster","healthInfoResetMessage","url","URL","window","location","toString","port","process","wsProt","wsProtocol","protocol","baseUrl","document","baseURI","pathname","socket","WebSocket","hostname","interval","onopen","console","log","send","setInterval","setServerDiagStat","onmessage","m","JSON","parse","serverHealthInfo","healthInfoMessageReceived","encoded","onerror","error","close","clearInterval","onclose","event","code","WSCloseInternalServerErr","WSClosePolicyViolation","WSCloseAbnormalClosure","setHelpName","PageHeaderWrapper","label","actions","HelpMenu","PageLayout","RegisterCluster","withBorders","TestWrapper","gap","toLowerCase","includes","href","paddingTop","paddingLeft","download","element","createElement","setAttribute","body","appendChild","click","removeChild","disabled","startDiagnosticAction","InfoIcon"],"sourceRoot":""}
{"version":3,"file":"static/js/696.263e964e.chunk.js","mappings":"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","sources":["screens/Console/Configurations/TiersConfiguration/UpdateTierCredentialsModal.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport {\n  Button,\n  FileSelector,\n  FormLayout,\n  Grid,\n  InputBox,\n  LockIcon,\n  ProgressBar,\n} from \"mds\";\nimport { Tier } from \"api/consoleApi\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\n\ninterface ITierCredentialsModal {\n  open: boolean;\n  closeModalAndRefresh: (refresh: boolean) => any;\n  tierData: Tier;\n}\n\nconst UpdateTierCredentialsModal = ({\n  open,\n  closeModalAndRefresh,\n  tierData,\n}: ITierCredentialsModal) => {\n  const dispatch = useAppDispatch();\n  const [savingTiers, setSavingTiers] = useState<boolean>(false);\n  const [creds, setCreds] = useState<string>(\"\");\n  const [encodedCreds, setEncodedCreds] = useState<string>(\"\");\n\n  const [accountName, setAccountName] = useState<string>(\"\");\n  const [accountKey, setAccountKey] = useState<string>(\"\");\n\n  // Validations\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n\n  const type = get(tierData, \"type\", \"\");\n  const name = get(tierData, `${type}.name`, \"\");\n\n  useEffect(() => {\n    let valid = true;\n\n    if (type === \"s3\" || type === \"azure\" || type === \"minio\") {\n      if (accountName === \"\" || accountKey === \"\") {\n        valid = false;\n      }\n    } else if (type === \"gcs\") {\n      if (encodedCreds === \"\") {\n        valid = false;\n      }\n    }\n    setIsFormValid(valid);\n  }, [accountKey, accountName, encodedCreds, type]);\n\n  const addRecord = () => {\n    let rules = {};\n\n    if (type === \"s3\" || type === \"azure\" || type === \"minio\") {\n      rules = {\n        access_key: accountName,\n        secret_key: accountKey,\n      };\n    } else if (type === \"gcs\") {\n      rules = {\n        creds: encodedCreds,\n      };\n    }\n    if (name !== \"\") {\n      api.admin\n        .editTierCredentials(\n          type as \"azure\" | \"s3\" | \"minio\" | \"gcs\",\n          name,\n          rules,\n        )\n        .then(() => {\n          setSavingTiers(false);\n          closeModalAndRefresh(true);\n        })\n        .catch((err) => {\n          setSavingTiers(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        });\n    } else {\n      setModalErrorSnackMessage({\n        errorMessage: \"There was an error retrieving tier information\",\n        detailedError: \"\",\n      });\n    }\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      titleIcon={<LockIcon />}\n      onClose={() => {\n        closeModalAndRefresh(false);\n      }}\n      title={`Update Credentials - ${type} / ${name}`}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          setSavingTiers(true);\n          addRecord();\n        }}\n      >\n        <FormLayout withBorders={false} containerPadding={false}>\n          {(type === \"s3\" || type === \"minio\") && (\n            <Fragment>\n              <InputBox\n                id=\"accessKey\"\n                name=\"accessKey\"\n                label=\"Access Key\"\n                placeholder=\"Enter Access Key\"\n                value={accountName}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountName(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"secretKey\"\n                name=\"secretKey\"\n                label=\"Secret Key\"\n                placeholder=\"Enter Secret Key\"\n                value={accountKey}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountKey(e.target.value);\n                }}\n              />\n            </Fragment>\n          )}\n          {type === \"gcs\" && (\n            <Fragment>\n              <FileSelector\n                accept=\".json\"\n                id=\"creds\"\n                label=\"Credentials\"\n                name=\"creds\"\n                returnEncodedData\n                onChange={(_, fileName, encodedValue) => {\n                  if (encodedValue) {\n                    setEncodedCreds(encodedValue);\n                    setCreds(fileName);\n                  }\n                }}\n                value={creds}\n              />\n            </Fragment>\n          )}\n          {type === \"azure\" && (\n            <Fragment>\n              <InputBox\n                id=\"accountName\"\n                name=\"accountName\"\n                label=\"Account Name\"\n                placeholder=\"Enter Account Name\"\n                value={accountName}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountName(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"accountKey\"\n                name=\"accountKey\"\n                label=\"Account Key\"\n                placeholder=\"Enter Account Key\"\n                value={accountKey}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountKey(e.target.value);\n                }}\n              />\n            </Fragment>\n          )}\n        </FormLayout>\n        {savingTiers && (\n          <Grid item xs={12}>\n            <ProgressBar />\n          </Grid>\n        )}\n        <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n          <Button\n            id={\"save-credentials\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            disabled={savingTiers || !isFormValid}\n            label={\"Save\"}\n          />\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default UpdateTierCredentialsModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n"],"names":["_ref","open","closeModalAndRefresh","tierData","dispatch","useAppDispatch","savingTiers","setSavingTiers","useState","creds","setCreds","encodedCreds","setEncodedCreds","accountName","setAccountName","accountKey","setAccountKey","isFormValid","setIsFormValid","type","get","name","useEffect","valid","_jsx","ModalWrapper","modalOpen","titleIcon","LockIcon","onClose","title","children","_jsxs","noValidate","autoComplete","onSubmit","e","preventDefault","addRecord","rules","access_key","secret_key","api","admin","editTierCredentials","then","catch","err","setModalErrorSnackMessage","errorToHandler","error","errorMessage","detailedError","FormLayout","withBorders","containerPadding","Fragment","InputBox","id","label","placeholder","value","onChange","target","FileSelector","accept","returnEncodedData","_","fileName","encodedValue","Grid","item","xs","ProgressBar","sx","modalStyleUtils","modalButtonBar","Button","variant","disabled","wideLimit","iconColor","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","setModalSnackMessage","message","detailedErrorMsg","length","ModalBox","widthLimit","MainError","isModal","Snackbar","closeSnackBar","mode","autoHideDuration","condensed"],"sourceRoot":""}